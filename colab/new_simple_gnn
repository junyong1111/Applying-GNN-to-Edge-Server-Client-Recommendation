{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"A100","machine_shape":"hm","authorship_tag":"ABX9TyMHcsp8Wqd3GrO+XSo/9l7d"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jIP3LXBqf7fX","executionInfo":{"status":"ok","timestamp":1721462734338,"user_tz":-540,"elapsed":27926,"user":{"displayName":"박준용","userId":"07115448813094959321"}},"outputId":"d872d916-5f79-421f-b3b8-e0ff100febc9"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","source":["import torch\n","# Install required packages.\n","# !pip install torch-sparse\n","print(torch.__version__)\n","print(torch.version.cuda)\n","\n","!pip install sentence-transformers\n","!pip install -q git+https://github.com/snap-stanford/deepsnap.git\n","\"\"\"\n","DeepSNAP는 그래프 신경망(Graph Neural Networks)을 구축하고 훈련하기 위한 파이썬 패키지\n","DeepSNAP은 PyTorch 기반의 그래프 신경망 라이브러리 PyG(PyTorch Geometric)에서 영감을 받아 개발되었다. DeepSNAP은 PyG와 유사한 인터페이스를 제공하여 그래프 데이터를 로드하고 전처리할 수 있다.\n","\"\"\"\n","!pip install -U -q PyDrive\n","torch_version = str(torch.__version__)\n","\n","#-- torch-virsio 불일치로 인한 하드 코딩\n","scatter_src = f\"https://pytorch-geometric.com/whl/torch-2.3.0+cu121.html\"\n","sparse_src = f\"https://pytorch-geometric.com/whl/torch-2.3.0+cu121.html\"\n","#-- torch-virsio 불일치로 인한 하드 코딩\n","\n","#-- 2.3.1. 버전 업데이트 시 아래 코드를 사용 가능\n","# scatter_src = f\"https://pytorch-geometric.com/whl/torch-{torch_version}.html\"\n","# sparse_src = f\"https://pytorch-geometric.com/whl/torch-{torch_version}.html\"\n","#-- 2.3.1. 버전 업데이트 시 아래 코드를 사용 가능\n","\n","\n","\n","!pip install torch-scatter -f $scatter_src\n","!pip install torch-sparse -f $sparse_src\n","!pip install torch-geometric"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UNBlKlMUlYka","executionInfo":{"status":"ok","timestamp":1721462940342,"user_tz":-540,"elapsed":96564,"user":{"displayName":"박준용","userId":"07115448813094959321"}},"outputId":"c89fbcad-36df-4812-9abe-0c5044a50705"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["2.3.1+cu121\n","12.1\n","Collecting sentence-transformers\n","  Downloading sentence_transformers-3.0.1-py3-none-any.whl (227 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m227.1/227.1 kB\u001b[0m \u001b[31m5.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: transformers<5.0.0,>=4.34.0 in /usr/local/lib/python3.10/dist-packages (from sentence-transformers) (4.42.4)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from sentence-transformers) (4.66.4)\n","Requirement already satisfied: torch>=1.11.0 in /usr/local/lib/python3.10/dist-packages (from sentence-transformers) (2.3.1+cu121)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from sentence-transformers) (1.25.2)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (from sentence-transformers) (1.2.2)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from sentence-transformers) (1.11.4)\n","Requirement already satisfied: huggingface-hub>=0.15.1 in /usr/local/lib/python3.10/dist-packages (from sentence-transformers) (0.23.5)\n","Requirement already satisfied: Pillow in /usr/local/lib/python3.10/dist-packages (from sentence-transformers) (9.4.0)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from huggingface-hub>=0.15.1->sentence-transformers) (3.15.4)\n","Requirement already satisfied: fsspec>=2023.5.0 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub>=0.15.1->sentence-transformers) (2023.6.0)\n","Requirement already satisfied: packaging>=20.9 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub>=0.15.1->sentence-transformers) (24.1)\n","Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub>=0.15.1->sentence-transformers) (6.0.1)\n","Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from huggingface-hub>=0.15.1->sentence-transformers) (2.31.0)\n","Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub>=0.15.1->sentence-transformers) (4.12.2)\n","Requirement already satisfied: sympy in /usr/local/lib/python3.10/dist-packages (from torch>=1.11.0->sentence-transformers) (1.13.0)\n","Requirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from torch>=1.11.0->sentence-transformers) (3.3)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch>=1.11.0->sentence-transformers) (3.1.4)\n","Collecting nvidia-cuda-nvrtc-cu12==12.1.105 (from torch>=1.11.0->sentence-transformers)\n","  Using cached nvidia_cuda_nvrtc_cu12-12.1.105-py3-none-manylinux1_x86_64.whl (23.7 MB)\n","Collecting nvidia-cuda-runtime-cu12==12.1.105 (from torch>=1.11.0->sentence-transformers)\n","  Using cached nvidia_cuda_runtime_cu12-12.1.105-py3-none-manylinux1_x86_64.whl (823 kB)\n","Collecting nvidia-cuda-cupti-cu12==12.1.105 (from torch>=1.11.0->sentence-transformers)\n","  Using cached nvidia_cuda_cupti_cu12-12.1.105-py3-none-manylinux1_x86_64.whl (14.1 MB)\n","Collecting nvidia-cudnn-cu12==8.9.2.26 (from torch>=1.11.0->sentence-transformers)\n","  Using cached nvidia_cudnn_cu12-8.9.2.26-py3-none-manylinux1_x86_64.whl (731.7 MB)\n","Collecting nvidia-cublas-cu12==12.1.3.1 (from torch>=1.11.0->sentence-transformers)\n","  Using cached nvidia_cublas_cu12-12.1.3.1-py3-none-manylinux1_x86_64.whl (410.6 MB)\n","Collecting nvidia-cufft-cu12==11.0.2.54 (from torch>=1.11.0->sentence-transformers)\n","  Using cached nvidia_cufft_cu12-11.0.2.54-py3-none-manylinux1_x86_64.whl (121.6 MB)\n","Collecting nvidia-curand-cu12==10.3.2.106 (from torch>=1.11.0->sentence-transformers)\n","  Using cached nvidia_curand_cu12-10.3.2.106-py3-none-manylinux1_x86_64.whl (56.5 MB)\n","Collecting nvidia-cusolver-cu12==11.4.5.107 (from torch>=1.11.0->sentence-transformers)\n","  Using cached nvidia_cusolver_cu12-11.4.5.107-py3-none-manylinux1_x86_64.whl (124.2 MB)\n","Collecting nvidia-cusparse-cu12==12.1.0.106 (from torch>=1.11.0->sentence-transformers)\n","  Using cached nvidia_cusparse_cu12-12.1.0.106-py3-none-manylinux1_x86_64.whl (196.0 MB)\n","Collecting nvidia-nccl-cu12==2.20.5 (from torch>=1.11.0->sentence-transformers)\n","  Using cached nvidia_nccl_cu12-2.20.5-py3-none-manylinux2014_x86_64.whl (176.2 MB)\n","Collecting nvidia-nvtx-cu12==12.1.105 (from torch>=1.11.0->sentence-transformers)\n","  Using cached nvidia_nvtx_cu12-12.1.105-py3-none-manylinux1_x86_64.whl (99 kB)\n","Requirement already satisfied: triton==2.3.1 in /usr/local/lib/python3.10/dist-packages (from torch>=1.11.0->sentence-transformers) (2.3.1)\n","Collecting nvidia-nvjitlink-cu12 (from nvidia-cusolver-cu12==11.4.5.107->torch>=1.11.0->sentence-transformers)\n","  Downloading nvidia_nvjitlink_cu12-12.5.82-py3-none-manylinux2014_x86_64.whl (21.3 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m21.3/21.3 MB\u001b[0m \u001b[31m55.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.10/dist-packages (from transformers<5.0.0,>=4.34.0->sentence-transformers) (2024.5.15)\n","Requirement already satisfied: safetensors>=0.4.1 in /usr/local/lib/python3.10/dist-packages (from transformers<5.0.0,>=4.34.0->sentence-transformers) (0.4.3)\n","Requirement already satisfied: tokenizers<0.20,>=0.19 in /usr/local/lib/python3.10/dist-packages (from transformers<5.0.0,>=4.34.0->sentence-transformers) (0.19.1)\n","Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn->sentence-transformers) (1.4.2)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn->sentence-transformers) (3.5.0)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->torch>=1.11.0->sentence-transformers) (2.1.5)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface-hub>=0.15.1->sentence-transformers) (3.3.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface-hub>=0.15.1->sentence-transformers) (3.7)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface-hub>=0.15.1->sentence-transformers) (2.0.7)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface-hub>=0.15.1->sentence-transformers) (2024.7.4)\n","Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from sympy->torch>=1.11.0->sentence-transformers) (1.3.0)\n","Installing collected packages: nvidia-nvtx-cu12, nvidia-nvjitlink-cu12, nvidia-nccl-cu12, nvidia-curand-cu12, nvidia-cufft-cu12, nvidia-cuda-runtime-cu12, nvidia-cuda-nvrtc-cu12, nvidia-cuda-cupti-cu12, nvidia-cublas-cu12, nvidia-cusparse-cu12, nvidia-cudnn-cu12, nvidia-cusolver-cu12, sentence-transformers\n","Successfully installed nvidia-cublas-cu12-12.1.3.1 nvidia-cuda-cupti-cu12-12.1.105 nvidia-cuda-nvrtc-cu12-12.1.105 nvidia-cuda-runtime-cu12-12.1.105 nvidia-cudnn-cu12-8.9.2.26 nvidia-cufft-cu12-11.0.2.54 nvidia-curand-cu12-10.3.2.106 nvidia-cusolver-cu12-11.4.5.107 nvidia-cusparse-cu12-12.1.0.106 nvidia-nccl-cu12-2.20.5 nvidia-nvjitlink-cu12-12.5.82 nvidia-nvtx-cu12-12.1.105 sentence-transformers-3.0.1\n","  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Building wheel for deepsnap (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Looking in links: https://pytorch-geometric.com/whl/torch-2.3.0+cu121.html\n","Collecting torch-scatter\n","  Downloading https://data.pyg.org/whl/torch-2.3.0%2Bcu121/torch_scatter-2.1.2%2Bpt23cu121-cp310-cp310-linux_x86_64.whl (10.9 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m10.9/10.9 MB\u001b[0m \u001b[31m86.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: torch-scatter\n","Successfully installed torch-scatter-2.1.2+pt23cu121\n","Looking in links: https://pytorch-geometric.com/whl/torch-2.3.0+cu121.html\n","Collecting torch-sparse\n","  Downloading https://data.pyg.org/whl/torch-2.3.0%2Bcu121/torch_sparse-0.6.18%2Bpt23cu121-cp310-cp310-linux_x86_64.whl (5.1 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m5.1/5.1 MB\u001b[0m \u001b[31m65.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from torch-sparse) (1.11.4)\n","Requirement already satisfied: numpy<1.28.0,>=1.21.6 in /usr/local/lib/python3.10/dist-packages (from scipy->torch-sparse) (1.25.2)\n","Installing collected packages: torch-sparse\n","Successfully installed torch-sparse-0.6.18+pt23cu121\n","Collecting torch-geometric\n","  Downloading torch_geometric-2.5.3-py3-none-any.whl (1.1 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.1/1.1 MB\u001b[0m \u001b[31m22.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from torch-geometric) (4.66.4)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from torch-geometric) (1.25.2)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from torch-geometric) (1.11.4)\n","Requirement already satisfied: fsspec in /usr/local/lib/python3.10/dist-packages (from torch-geometric) (2023.6.0)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch-geometric) (3.1.4)\n","Requirement already satisfied: aiohttp in /usr/local/lib/python3.10/dist-packages (from torch-geometric) (3.9.5)\n","Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from torch-geometric) (2.31.0)\n","Requirement already satisfied: pyparsing in /usr/local/lib/python3.10/dist-packages (from torch-geometric) (3.1.2)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (from torch-geometric) (1.2.2)\n","Requirement already satisfied: psutil>=5.8.0 in /usr/local/lib/python3.10/dist-packages (from torch-geometric) (5.9.5)\n","Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.10/dist-packages (from aiohttp->torch-geometric) (1.3.1)\n","Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp->torch-geometric) (23.2.0)\n","Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from aiohttp->torch-geometric) (1.4.1)\n","Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.10/dist-packages (from aiohttp->torch-geometric) (6.0.5)\n","Requirement already satisfied: yarl<2.0,>=1.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp->torch-geometric) (1.9.4)\n","Requirement already satisfied: async-timeout<5.0,>=4.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp->torch-geometric) (4.0.3)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->torch-geometric) (2.1.5)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->torch-geometric) (3.3.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->torch-geometric) (3.7)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->torch-geometric) (2.0.7)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->torch-geometric) (2024.7.4)\n","Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn->torch-geometric) (1.4.2)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn->torch-geometric) (3.5.0)\n","Installing collected packages: torch-geometric\n","Successfully installed torch-geometric-2.5.3\n"]}]},{"cell_type":"code","source":["#-- torch-virsio 불일치로 인한 하드 코딩import pandas as pd\n","import numpy as np\n","import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","import torch_geometric\n","from torch_geometric.data import download_url, extract_zip\n","from torch_geometric.nn import GATConv, GCNConv\n","from torch_geometric.data import Data\n","from torch_sparse import SparseTensor\n","from sklearn.model_selection import train_test_split\n","from torch_geometric.utils import structured_negative_sampling\n","import requests\n","import os\n","\n","\n","device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n","print(device)\n","use_cuda = torch.cuda.is_available()\n","print(use_cuda)\n","if use_cuda:\n","  print(torch.cuda.get_device_name(0))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Xqn_Q1nJvmCz","executionInfo":{"status":"ok","timestamp":1721462949912,"user_tz":-540,"elapsed":4510,"user":{"displayName":"박준용","userId":"07115448813094959321"}},"outputId":"7ec0355f-f75c-4e0d-c286-448f16d1908f"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["cuda:0\n","True\n","NVIDIA A100-SXM4-40GB\n"]}]},{"cell_type":"markdown","source":["### 1. 데이터 불러오기"],"metadata":{"id":"dQj3n8iWja2j"}},{"cell_type":"code","source":["data_path = '/content/drive/MyDrive/CS224W/dataset/240725/'"],"metadata":{"id":"ynt59PFUgRrv","executionInfo":{"status":"ok","timestamp":1721462972591,"user_tz":-540,"elapsed":1064,"user":{"displayName":"박준용","userId":"07115448813094959321"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","\n","\n","network_path = data_path + 'simulation_results.csv'\n","cloud_path = data_path + 'cloud_characteristics.csv'\n","device_path = data_path + 'device_characteristics.csv'\n","\n","network = pd.read_csv(network_path)\n","cloud = pd.read_csv(cloud_path)\n","smartphone = pd.read_csv(device_path)\n","\n","print(\"평점 데이터 개수 : {}, 특성 데이터 개수 : {}\".format(network.shape[0],network.shape[1]))\n","print(\"클라우드 데이터 개수 : {}, 특성 데이터 개수 : {}\".format(cloud.shape[0], cloud.shape[1]))\n","print(\"기기 데이터 개수 : {}, 특성 데이터 개수 : {}\".format(smartphone.shape[0], smartphone.shape[1]))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-6fxgCW-gj8J","executionInfo":{"status":"ok","timestamp":1721462975101,"user_tz":-540,"elapsed":1623,"user":{"displayName":"박준용","userId":"07115448813094959321"}},"outputId":"6d0d129b-8d2d-491c-cf86-9182eb27a072"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["평점 데이터 개수 : 9828, 특성 데이터 개수 : 17\n","클라우드 데이터 개수 : 5, 특성 데이터 개수 : 73\n","기기 데이터 개수 : 30, 특성 데이터 개수 : 6\n"]}]},{"cell_type":"code","source":["network.head(20)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":731},"id":"dpFp00rEg8YA","executionInfo":{"status":"ok","timestamp":1721462981753,"user_tz":-540,"elapsed":545,"user":{"displayName":"박준용","userId":"07115448813094959321"}},"outputId":"f5939df9-5246-4ae8-df09-2d7787803e37"},"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    Timestamp  Hour    Device Selected Entity  Bandwidth       Delay  \\\n","0    0.001533     0   device1          cloud2   0.000000   58.112000   \n","1    0.001533     0   device2          cloud5   0.000000   85.024000   \n","2    0.001533     0   device3          cloud4   0.000000   81.059000   \n","3    0.001533     0   device4          cloud3   0.000000  104.701000   \n","4    0.001533     0   device5          cloud3   0.000000  121.353000   \n","5    0.001533     0   device6          cloud2   0.000000  106.108000   \n","6    0.001533     0   device7          cloud5   0.000000   88.953000   \n","7    0.001533     0   device8          cloud2   0.000000   58.078000   \n","8    0.001533     0   device9          cloud2   0.000000   33.830000   \n","9    0.001533     0  device10          cloud5   0.000000   80.786000   \n","10   0.001533     0  device11            self  66.929003   43.696248   \n","11   0.001533     0  device12            self  16.473371   47.466266   \n","12   0.001533     0  device13            self  15.510404   47.393248   \n","13   0.001533     0  device14          cloud2   0.000000   78.835000   \n","14   0.001533     0  device15          cloud3   0.000000  104.227000   \n","15   0.001533     0  device16          cloud4   0.000000   77.754000   \n","16   0.001533     0  device17          cloud2   0.000000   84.424000   \n","17   0.001533     0  device18          cloud2   0.000000   85.912000   \n","18   0.001533     0  device19          cloud5   0.000000   85.265000   \n","19   0.001533     0  device20          cloud2   0.000000  120.852000   \n","\n","        Loss  Rating  Device CPU  Device BW  Device Delay  Device Loss  \\\n","0   0.000000    2.84    0.184118  56.237117     13.646873     0.333098   \n","1   0.000000    2.30    0.415709  79.933500     22.594096     3.693803   \n","2   0.000000    2.38    0.272306  63.611185     15.503589     4.374117   \n","3   0.000000    1.91    0.350852  96.640198     31.891898     0.694582   \n","4   0.000000    1.57    0.147536  95.269600     40.139609     4.785945   \n","5   0.000000    1.88    0.136472  27.463388     37.680812     1.135629   \n","6   0.000000    2.22    0.423070  86.589250     24.298893     3.443048   \n","7   0.000000    2.84    0.179041  53.414670     13.873364     2.188239   \n","8   0.000000    3.32    0.189557  70.208367      1.701485     1.412607   \n","9   0.000000    2.38    0.378384  32.287895     20.060678     4.231429   \n","10  4.271664    3.71    0.282103  66.929003     43.696248     4.271664   \n","11  0.034101    3.21    0.435153  16.473371     47.466266     0.034101   \n","12  1.604600    3.18    0.186674  15.510404     47.393248     1.604600   \n","13  0.000000    2.42    0.154363  51.246792     23.926546     2.323259   \n","14  0.000000    1.92    0.219754  83.999926     31.542472     2.303026   \n","15  0.000000    2.44    0.332831  12.599041     13.716411     1.785275   \n","16  0.000000    2.31    0.189140  62.047718     26.783358     0.410249   \n","17  0.000000    2.28    0.302870  23.188209     27.603763     0.406483   \n","18  0.000000    2.29    0.295667  25.508232     22.383933     3.646679   \n","19  0.000000    1.58    0.333746  67.885299     44.942571     4.977603   \n","\n","    Device Self Processing  Cloud CPU Usage    Cloud BW  Cloud Latency  \\\n","0                 0.210398         0.578719  814.527858      13.747781   \n","1                 0.274977         0.441935  664.066573      18.582821   \n","2                 0.242501         0.544291  608.036074      23.608862   \n","3                 0.133345         0.664922  517.783533      18.881169   \n","4                 0.202342         0.664922  517.783533      18.881169   \n","5                 0.208278         0.578719  814.527858      13.747781   \n","6                 0.218807         0.441935  664.066573      18.582821   \n","7                 0.269566         0.578719  814.527858      13.747781   \n","8                 0.257291         0.578719  814.527858      13.747781   \n","9                 0.260939         0.441935  664.066573      18.582821   \n","10                0.222966         0.000000    0.000000       0.000000   \n","11                0.225187         0.000000    0.000000       0.000000   \n","12                0.118254         0.000000    0.000000       0.000000   \n","13                0.157599         0.578719  814.527858      13.747781   \n","14                0.240842         0.664922  517.783533      18.881169   \n","15                0.186597         0.544291  608.036074      23.608862   \n","16                0.281141         0.578719  814.527858      13.747781   \n","17                0.138829         0.578719  814.527858      13.747781   \n","18                0.103170         0.441935  664.066573      18.582821   \n","19                0.217767         0.578719  814.527858      13.747781   \n","\n","    Network Activity  \n","0                0.2  \n","1                0.2  \n","2                0.2  \n","3                0.2  \n","4                0.2  \n","5                0.2  \n","6                0.2  \n","7                0.2  \n","8                0.2  \n","9                0.2  \n","10               0.2  \n","11               0.2  \n","12               0.2  \n","13               0.2  \n","14               0.2  \n","15               0.2  \n","16               0.2  \n","17               0.2  \n","18               0.2  \n","19               0.2  "],"text/html":["\n","  <div id=\"df-7e15ee9e-4c3f-4937-a8f2-75b57ca46569\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Timestamp</th>\n","      <th>Hour</th>\n","      <th>Device</th>\n","      <th>Selected Entity</th>\n","      <th>Bandwidth</th>\n","      <th>Delay</th>\n","      <th>Loss</th>\n","      <th>Rating</th>\n","      <th>Device CPU</th>\n","      <th>Device BW</th>\n","      <th>Device Delay</th>\n","      <th>Device Loss</th>\n","      <th>Device Self Processing</th>\n","      <th>Cloud CPU Usage</th>\n","      <th>Cloud BW</th>\n","      <th>Cloud Latency</th>\n","      <th>Network Activity</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.001533</td>\n","      <td>0</td>\n","      <td>device1</td>\n","      <td>cloud2</td>\n","      <td>0.000000</td>\n","      <td>58.112000</td>\n","      <td>0.000000</td>\n","      <td>2.84</td>\n","      <td>0.184118</td>\n","      <td>56.237117</td>\n","      <td>13.646873</td>\n","      <td>0.333098</td>\n","      <td>0.210398</td>\n","      <td>0.578719</td>\n","      <td>814.527858</td>\n","      <td>13.747781</td>\n","      <td>0.2</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.001533</td>\n","      <td>0</td>\n","      <td>device2</td>\n","      <td>cloud5</td>\n","      <td>0.000000</td>\n","      <td>85.024000</td>\n","      <td>0.000000</td>\n","      <td>2.30</td>\n","      <td>0.415709</td>\n","      <td>79.933500</td>\n","      <td>22.594096</td>\n","      <td>3.693803</td>\n","      <td>0.274977</td>\n","      <td>0.441935</td>\n","      <td>664.066573</td>\n","      <td>18.582821</td>\n","      <td>0.2</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.001533</td>\n","      <td>0</td>\n","      <td>device3</td>\n","      <td>cloud4</td>\n","      <td>0.000000</td>\n","      <td>81.059000</td>\n","      <td>0.000000</td>\n","      <td>2.38</td>\n","      <td>0.272306</td>\n","      <td>63.611185</td>\n","      <td>15.503589</td>\n","      <td>4.374117</td>\n","      <td>0.242501</td>\n","      <td>0.544291</td>\n","      <td>608.036074</td>\n","      <td>23.608862</td>\n","      <td>0.2</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.001533</td>\n","      <td>0</td>\n","      <td>device4</td>\n","      <td>cloud3</td>\n","      <td>0.000000</td>\n","      <td>104.701000</td>\n","      <td>0.000000</td>\n","      <td>1.91</td>\n","      <td>0.350852</td>\n","      <td>96.640198</td>\n","      <td>31.891898</td>\n","      <td>0.694582</td>\n","      <td>0.133345</td>\n","      <td>0.664922</td>\n","      <td>517.783533</td>\n","      <td>18.881169</td>\n","      <td>0.2</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.001533</td>\n","      <td>0</td>\n","      <td>device5</td>\n","      <td>cloud3</td>\n","      <td>0.000000</td>\n","      <td>121.353000</td>\n","      <td>0.000000</td>\n","      <td>1.57</td>\n","      <td>0.147536</td>\n","      <td>95.269600</td>\n","      <td>40.139609</td>\n","      <td>4.785945</td>\n","      <td>0.202342</td>\n","      <td>0.664922</td>\n","      <td>517.783533</td>\n","      <td>18.881169</td>\n","      <td>0.2</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>0.001533</td>\n","      <td>0</td>\n","      <td>device6</td>\n","      <td>cloud2</td>\n","      <td>0.000000</td>\n","      <td>106.108000</td>\n","      <td>0.000000</td>\n","      <td>1.88</td>\n","      <td>0.136472</td>\n","      <td>27.463388</td>\n","      <td>37.680812</td>\n","      <td>1.135629</td>\n","      <td>0.208278</td>\n","      <td>0.578719</td>\n","      <td>814.527858</td>\n","      <td>13.747781</td>\n","      <td>0.2</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>0.001533</td>\n","      <td>0</td>\n","      <td>device7</td>\n","      <td>cloud5</td>\n","      <td>0.000000</td>\n","      <td>88.953000</td>\n","      <td>0.000000</td>\n","      <td>2.22</td>\n","      <td>0.423070</td>\n","      <td>86.589250</td>\n","      <td>24.298893</td>\n","      <td>3.443048</td>\n","      <td>0.218807</td>\n","      <td>0.441935</td>\n","      <td>664.066573</td>\n","      <td>18.582821</td>\n","      <td>0.2</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>0.001533</td>\n","      <td>0</td>\n","      <td>device8</td>\n","      <td>cloud2</td>\n","      <td>0.000000</td>\n","      <td>58.078000</td>\n","      <td>0.000000</td>\n","      <td>2.84</td>\n","      <td>0.179041</td>\n","      <td>53.414670</td>\n","      <td>13.873364</td>\n","      <td>2.188239</td>\n","      <td>0.269566</td>\n","      <td>0.578719</td>\n","      <td>814.527858</td>\n","      <td>13.747781</td>\n","      <td>0.2</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>0.001533</td>\n","      <td>0</td>\n","      <td>device9</td>\n","      <td>cloud2</td>\n","      <td>0.000000</td>\n","      <td>33.830000</td>\n","      <td>0.000000</td>\n","      <td>3.32</td>\n","      <td>0.189557</td>\n","      <td>70.208367</td>\n","      <td>1.701485</td>\n","      <td>1.412607</td>\n","      <td>0.257291</td>\n","      <td>0.578719</td>\n","      <td>814.527858</td>\n","      <td>13.747781</td>\n","      <td>0.2</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>0.001533</td>\n","      <td>0</td>\n","      <td>device10</td>\n","      <td>cloud5</td>\n","      <td>0.000000</td>\n","      <td>80.786000</td>\n","      <td>0.000000</td>\n","      <td>2.38</td>\n","      <td>0.378384</td>\n","      <td>32.287895</td>\n","      <td>20.060678</td>\n","      <td>4.231429</td>\n","      <td>0.260939</td>\n","      <td>0.441935</td>\n","      <td>664.066573</td>\n","      <td>18.582821</td>\n","      <td>0.2</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>0.001533</td>\n","      <td>0</td>\n","      <td>device11</td>\n","      <td>self</td>\n","      <td>66.929003</td>\n","      <td>43.696248</td>\n","      <td>4.271664</td>\n","      <td>3.71</td>\n","      <td>0.282103</td>\n","      <td>66.929003</td>\n","      <td>43.696248</td>\n","      <td>4.271664</td>\n","      <td>0.222966</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.2</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>0.001533</td>\n","      <td>0</td>\n","      <td>device12</td>\n","      <td>self</td>\n","      <td>16.473371</td>\n","      <td>47.466266</td>\n","      <td>0.034101</td>\n","      <td>3.21</td>\n","      <td>0.435153</td>\n","      <td>16.473371</td>\n","      <td>47.466266</td>\n","      <td>0.034101</td>\n","      <td>0.225187</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.2</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>0.001533</td>\n","      <td>0</td>\n","      <td>device13</td>\n","      <td>self</td>\n","      <td>15.510404</td>\n","      <td>47.393248</td>\n","      <td>1.604600</td>\n","      <td>3.18</td>\n","      <td>0.186674</td>\n","      <td>15.510404</td>\n","      <td>47.393248</td>\n","      <td>1.604600</td>\n","      <td>0.118254</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.2</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>0.001533</td>\n","      <td>0</td>\n","      <td>device14</td>\n","      <td>cloud2</td>\n","      <td>0.000000</td>\n","      <td>78.835000</td>\n","      <td>0.000000</td>\n","      <td>2.42</td>\n","      <td>0.154363</td>\n","      <td>51.246792</td>\n","      <td>23.926546</td>\n","      <td>2.323259</td>\n","      <td>0.157599</td>\n","      <td>0.578719</td>\n","      <td>814.527858</td>\n","      <td>13.747781</td>\n","      <td>0.2</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>0.001533</td>\n","      <td>0</td>\n","      <td>device15</td>\n","      <td>cloud3</td>\n","      <td>0.000000</td>\n","      <td>104.227000</td>\n","      <td>0.000000</td>\n","      <td>1.92</td>\n","      <td>0.219754</td>\n","      <td>83.999926</td>\n","      <td>31.542472</td>\n","      <td>2.303026</td>\n","      <td>0.240842</td>\n","      <td>0.664922</td>\n","      <td>517.783533</td>\n","      <td>18.881169</td>\n","      <td>0.2</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>0.001533</td>\n","      <td>0</td>\n","      <td>device16</td>\n","      <td>cloud4</td>\n","      <td>0.000000</td>\n","      <td>77.754000</td>\n","      <td>0.000000</td>\n","      <td>2.44</td>\n","      <td>0.332831</td>\n","      <td>12.599041</td>\n","      <td>13.716411</td>\n","      <td>1.785275</td>\n","      <td>0.186597</td>\n","      <td>0.544291</td>\n","      <td>608.036074</td>\n","      <td>23.608862</td>\n","      <td>0.2</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>0.001533</td>\n","      <td>0</td>\n","      <td>device17</td>\n","      <td>cloud2</td>\n","      <td>0.000000</td>\n","      <td>84.424000</td>\n","      <td>0.000000</td>\n","      <td>2.31</td>\n","      <td>0.189140</td>\n","      <td>62.047718</td>\n","      <td>26.783358</td>\n","      <td>0.410249</td>\n","      <td>0.281141</td>\n","      <td>0.578719</td>\n","      <td>814.527858</td>\n","      <td>13.747781</td>\n","      <td>0.2</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>0.001533</td>\n","      <td>0</td>\n","      <td>device18</td>\n","      <td>cloud2</td>\n","      <td>0.000000</td>\n","      <td>85.912000</td>\n","      <td>0.000000</td>\n","      <td>2.28</td>\n","      <td>0.302870</td>\n","      <td>23.188209</td>\n","      <td>27.603763</td>\n","      <td>0.406483</td>\n","      <td>0.138829</td>\n","      <td>0.578719</td>\n","      <td>814.527858</td>\n","      <td>13.747781</td>\n","      <td>0.2</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>0.001533</td>\n","      <td>0</td>\n","      <td>device19</td>\n","      <td>cloud5</td>\n","      <td>0.000000</td>\n","      <td>85.265000</td>\n","      <td>0.000000</td>\n","      <td>2.29</td>\n","      <td>0.295667</td>\n","      <td>25.508232</td>\n","      <td>22.383933</td>\n","      <td>3.646679</td>\n","      <td>0.103170</td>\n","      <td>0.441935</td>\n","      <td>664.066573</td>\n","      <td>18.582821</td>\n","      <td>0.2</td>\n","    </tr>\n","    <tr>\n","      <th>19</th>\n","      <td>0.001533</td>\n","      <td>0</td>\n","      <td>device20</td>\n","      <td>cloud2</td>\n","      <td>0.000000</td>\n","      <td>120.852000</td>\n","      <td>0.000000</td>\n","      <td>1.58</td>\n","      <td>0.333746</td>\n","      <td>67.885299</td>\n","      <td>44.942571</td>\n","      <td>4.977603</td>\n","      <td>0.217767</td>\n","      <td>0.578719</td>\n","      <td>814.527858</td>\n","      <td>13.747781</td>\n","      <td>0.2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7e15ee9e-4c3f-4937-a8f2-75b57ca46569')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-7e15ee9e-4c3f-4937-a8f2-75b57ca46569 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-7e15ee9e-4c3f-4937-a8f2-75b57ca46569');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-e53b3f03-c337-4171-bdfd-f8e0bce8e074\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e53b3f03-c337-4171-bdfd-f8e0bce8e074')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-e53b3f03-c337-4171-bdfd-f8e0bce8e074 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"network","summary":"{\n  \"name\": \"network\",\n  \"rows\": 9828,\n  \"fields\": [\n    {\n      \"column\": \"Timestamp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 137371.75013004168,\n        \"min\": 0.001533031463623,\n        \"max\": 475030.6147811413,\n        \"num_unique_values\": 328,\n        \"samples\": [\n          335528.57220959663,\n          159792.44062304497,\n          363138.9676940441\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Hour\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6,\n        \"min\": 0,\n        \"max\": 23,\n        \"num_unique_values\": 24,\n        \"samples\": [\n          19,\n          8,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Device\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 30,\n        \"samples\": [\n          \"device28\",\n          \"device16\",\n          \"device24\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Selected Entity\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"cloud2\",\n          \"cloud5\",\n          \"cloud1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bandwidth\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 21.84074461146141,\n        \"min\": 0.0,\n        \"max\": 96.64019771068564,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          42.85895815927772,\n          0.0,\n          83.99992571960722\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Delay\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 23.91553044861988,\n        \"min\": 31.54247153623077,\n        \"max\": 125.239,\n        \"num_unique_values\": 7407,\n        \"samples\": [\n          57.286,\n          57.989,\n          81.018\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Loss\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.7109810265656271,\n        \"min\": 0.0,\n        \"max\": 20.0,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          0.6945818878354493,\n          2.3030262214784503,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Rating\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5988902982000204,\n        \"min\": 1.5,\n        \"max\": 4.31,\n        \"num_unique_values\": 174,\n        \"samples\": [\n          1.63,\n          3.31,\n          1.62\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Device CPU\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.09796979822982688,\n        \"min\": 0.1112737001176528,\n        \"max\": 0.4511163739580229,\n        \"num_unique_values\": 30,\n        \"samples\": [\n          0.1112737001176528,\n          0.3328314082307448,\n          0.3265227562600454\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Device BW\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 25.94456158174783,\n        \"min\": 12.599040784514026,\n        \"max\": 97.11026458659131,\n        \"num_unique_values\": 30,\n        \"samples\": [\n          62.25204413695288,\n          12.599040784514026,\n          77.87822923532333\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Device Delay\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.43903634809195,\n        \"min\": 1.7014850098311292,\n        \"max\": 47.46626627421548,\n        \"num_unique_values\": 30,\n        \"samples\": [\n          12.119722040642356,\n          13.71641094222602,\n          10.72705741543544\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Device Loss\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.487792597314003,\n        \"min\": 0.0341012304712601,\n        \"max\": 4.977603044091133,\n        \"num_unique_values\": 30,\n        \"samples\": [\n          0.5993949163087964,\n          1.7852751724872369,\n          1.6179148974399715\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Device Self Processing\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.05078241556607028,\n        \"min\": 0.1031703265385662,\n        \"max\": 0.2892604784623056,\n        \"num_unique_values\": 30,\n        \"samples\": [\n          0.2215638498232123,\n          0.1865971291642217,\n          0.2679589410126549\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Cloud CPU Usage\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.267989588698304,\n        \"min\": 0.0,\n        \"max\": 0.9090731697152384,\n        \"num_unique_values\": 121,\n        \"samples\": [\n          0.5341146548303884,\n          0.3662459009533305,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Cloud BW\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 279.10879836455223,\n        \"min\": 0.0,\n        \"max\": 839.9028383104454,\n        \"num_unique_values\": 121,\n        \"samples\": [\n          628.2535415042493,\n          755.2082063130634,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Cloud Latency\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.689764909580528,\n        \"min\": 0.0,\n        \"max\": 31.249603278471547,\n        \"num_unique_values\": 121,\n        \"samples\": [\n          20.469902641242676,\n          31.197839176612792,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Network Activity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3077378821916444,\n        \"min\": 0.1,\n        \"max\": 1.0,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          0.7,\n          0.1,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["cloud.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":273},"id":"RRocO1tohB5s","executionInfo":{"status":"ok","timestamp":1721462988166,"user_tz":-540,"elapsed":509,"user":{"displayName":"박준용","userId":"07115448813094959321"}},"outputId":"07305286-44ee-41ed-8e7b-c40fa6789f75"},"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Cloud ID     CPU_0       CPU_1      CPU_2     CPU_3       CPU_4      CPU_5  \\\n","0         1  0.507764  727.556211  31.249603  0.461091  604.131141  18.270724   \n","1         2  0.578719  814.527858  13.747781  0.801083  792.006961  23.186803   \n","2         3  0.664922  517.783533  18.881169  0.615591  526.830225  24.767474   \n","3         4  0.544291  608.036074  23.608862  0.406775  633.274533  25.701024   \n","4         5  0.441935  664.066573  18.582821  0.740885  713.772839  12.671802   \n","\n","      CPU_6       CPU_7      CPU_8  ...  Latency_14  Latency_15  Latency_16  \\\n","0  0.604781  635.636189  24.269509  ...   19.335120    0.601158  609.602098   \n","1  0.742911  758.985951  17.375809  ...   21.041879    0.610105  778.106951   \n","2  0.671983  556.297317  18.796520  ...   24.454588    0.534115  628.253542   \n","3  0.452732  490.565321  15.652982  ...   24.993430    0.604888  501.240280   \n","4  0.478255  740.268426  10.618753  ...   17.316866    0.631074  733.560513   \n","\n","   Latency_17  Latency_18  Latency_19  Latency_20  Latency_21  Latency_22  \\\n","0   20.709718    0.584243  559.464865   16.774608    0.549875  617.465407   \n","1   15.039711    0.624512  792.698941   19.072127    0.645998  839.902838   \n","2   20.469903    0.591578  541.898318   25.420264    0.532385  518.376311   \n","3   23.517115    0.683190  498.077424   21.936498    0.490787  513.342076   \n","4   19.789535    0.664379  669.126153   23.456356    0.677897  707.100408   \n","\n","   Latency_23  \n","0   22.695334  \n","1   20.426652  \n","2   24.967809  \n","3    9.112351  \n","4   21.833436  \n","\n","[5 rows x 73 columns]"],"text/html":["\n","  <div id=\"df-1ab996de-6015-4949-8357-86c952ebf734\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Cloud ID</th>\n","      <th>CPU_0</th>\n","      <th>CPU_1</th>\n","      <th>CPU_2</th>\n","      <th>CPU_3</th>\n","      <th>CPU_4</th>\n","      <th>CPU_5</th>\n","      <th>CPU_6</th>\n","      <th>CPU_7</th>\n","      <th>CPU_8</th>\n","      <th>...</th>\n","      <th>Latency_14</th>\n","      <th>Latency_15</th>\n","      <th>Latency_16</th>\n","      <th>Latency_17</th>\n","      <th>Latency_18</th>\n","      <th>Latency_19</th>\n","      <th>Latency_20</th>\n","      <th>Latency_21</th>\n","      <th>Latency_22</th>\n","      <th>Latency_23</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>0.507764</td>\n","      <td>727.556211</td>\n","      <td>31.249603</td>\n","      <td>0.461091</td>\n","      <td>604.131141</td>\n","      <td>18.270724</td>\n","      <td>0.604781</td>\n","      <td>635.636189</td>\n","      <td>24.269509</td>\n","      <td>...</td>\n","      <td>19.335120</td>\n","      <td>0.601158</td>\n","      <td>609.602098</td>\n","      <td>20.709718</td>\n","      <td>0.584243</td>\n","      <td>559.464865</td>\n","      <td>16.774608</td>\n","      <td>0.549875</td>\n","      <td>617.465407</td>\n","      <td>22.695334</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>0.578719</td>\n","      <td>814.527858</td>\n","      <td>13.747781</td>\n","      <td>0.801083</td>\n","      <td>792.006961</td>\n","      <td>23.186803</td>\n","      <td>0.742911</td>\n","      <td>758.985951</td>\n","      <td>17.375809</td>\n","      <td>...</td>\n","      <td>21.041879</td>\n","      <td>0.610105</td>\n","      <td>778.106951</td>\n","      <td>15.039711</td>\n","      <td>0.624512</td>\n","      <td>792.698941</td>\n","      <td>19.072127</td>\n","      <td>0.645998</td>\n","      <td>839.902838</td>\n","      <td>20.426652</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>0.664922</td>\n","      <td>517.783533</td>\n","      <td>18.881169</td>\n","      <td>0.615591</td>\n","      <td>526.830225</td>\n","      <td>24.767474</td>\n","      <td>0.671983</td>\n","      <td>556.297317</td>\n","      <td>18.796520</td>\n","      <td>...</td>\n","      <td>24.454588</td>\n","      <td>0.534115</td>\n","      <td>628.253542</td>\n","      <td>20.469903</td>\n","      <td>0.591578</td>\n","      <td>541.898318</td>\n","      <td>25.420264</td>\n","      <td>0.532385</td>\n","      <td>518.376311</td>\n","      <td>24.967809</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>0.544291</td>\n","      <td>608.036074</td>\n","      <td>23.608862</td>\n","      <td>0.406775</td>\n","      <td>633.274533</td>\n","      <td>25.701024</td>\n","      <td>0.452732</td>\n","      <td>490.565321</td>\n","      <td>15.652982</td>\n","      <td>...</td>\n","      <td>24.993430</td>\n","      <td>0.604888</td>\n","      <td>501.240280</td>\n","      <td>23.517115</td>\n","      <td>0.683190</td>\n","      <td>498.077424</td>\n","      <td>21.936498</td>\n","      <td>0.490787</td>\n","      <td>513.342076</td>\n","      <td>9.112351</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>0.441935</td>\n","      <td>664.066573</td>\n","      <td>18.582821</td>\n","      <td>0.740885</td>\n","      <td>713.772839</td>\n","      <td>12.671802</td>\n","      <td>0.478255</td>\n","      <td>740.268426</td>\n","      <td>10.618753</td>\n","      <td>...</td>\n","      <td>17.316866</td>\n","      <td>0.631074</td>\n","      <td>733.560513</td>\n","      <td>19.789535</td>\n","      <td>0.664379</td>\n","      <td>669.126153</td>\n","      <td>23.456356</td>\n","      <td>0.677897</td>\n","      <td>707.100408</td>\n","      <td>21.833436</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 73 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1ab996de-6015-4949-8357-86c952ebf734')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-1ab996de-6015-4949-8357-86c952ebf734 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-1ab996de-6015-4949-8357-86c952ebf734');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-2a74b78f-603f-4b0c-a853-1717447e3166\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2a74b78f-603f-4b0c-a853-1717447e3166')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-2a74b78f-603f-4b0c-a853-1717447e3166 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"cloud"}},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":["smartphone.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"7aReRcWMhDlE","executionInfo":{"status":"ok","timestamp":1721462990286,"user_tz":-540,"elapsed":5,"user":{"displayName":"박준용","userId":"07115448813094959321"}},"outputId":"54a5c0f4-ea96-4f4a-ecfc-6940d46fbefc"},"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Device ID       CPU  Bandwidth      Delay      Loss  Self Processing Power\n","0          1  0.184118  56.237117  13.646873  0.333098               0.210398\n","1          2  0.415709  79.933500  22.594096  3.693803               0.274977\n","2          3  0.272306  63.611185  15.503589  4.374117               0.242501\n","3          4  0.350852  96.640198  31.891898  0.694582               0.133345\n","4          5  0.147536  95.269600  40.139609  4.785945               0.202342"],"text/html":["\n","  <div id=\"df-bd8a6d75-29e0-43dd-97d5-c72f2e3a0239\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Device ID</th>\n","      <th>CPU</th>\n","      <th>Bandwidth</th>\n","      <th>Delay</th>\n","      <th>Loss</th>\n","      <th>Self Processing Power</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>0.184118</td>\n","      <td>56.237117</td>\n","      <td>13.646873</td>\n","      <td>0.333098</td>\n","      <td>0.210398</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>0.415709</td>\n","      <td>79.933500</td>\n","      <td>22.594096</td>\n","      <td>3.693803</td>\n","      <td>0.274977</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>0.272306</td>\n","      <td>63.611185</td>\n","      <td>15.503589</td>\n","      <td>4.374117</td>\n","      <td>0.242501</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>0.350852</td>\n","      <td>96.640198</td>\n","      <td>31.891898</td>\n","      <td>0.694582</td>\n","      <td>0.133345</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>0.147536</td>\n","      <td>95.269600</td>\n","      <td>40.139609</td>\n","      <td>4.785945</td>\n","      <td>0.202342</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bd8a6d75-29e0-43dd-97d5-c72f2e3a0239')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-bd8a6d75-29e0-43dd-97d5-c72f2e3a0239 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-bd8a6d75-29e0-43dd-97d5-c72f2e3a0239');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-e497fba6-cba9-4818-8fa9-dda08bca7525\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e497fba6-cba9-4818-8fa9-dda08bca7525')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-e497fba6-cba9-4818-8fa9-dda08bca7525 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"smartphone","summary":"{\n  \"name\": \"smartphone\",\n  \"rows\": 30,\n  \"fields\": [\n    {\n      \"column\": \"Device ID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8,\n        \"min\": 1,\n        \"max\": 30,\n        \"num_unique_values\": 30,\n        \"samples\": [\n          28,\n          16,\n          24\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CPU\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.09963292452507151,\n        \"min\": 0.1112737001176528,\n        \"max\": 0.4511163739580229,\n        \"num_unique_values\": 30,\n        \"samples\": [\n          0.1112737001176528,\n          0.3328314082307448,\n          0.3265227562600454\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bandwidth\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 26.383824696790327,\n        \"min\": 12.599040784514026,\n        \"max\": 97.11026458659131,\n        \"num_unique_values\": 30,\n        \"samples\": [\n          62.25204413695288,\n          12.599040784514026,\n          77.87822923532333\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Delay\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13.669500903691262,\n        \"min\": 1.7014850098311292,\n        \"max\": 47.46626627421548,\n        \"num_unique_values\": 30,\n        \"samples\": [\n          12.119722040642356,\n          13.71641094222602,\n          10.72705741543544\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Loss\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.5130426178155088,\n        \"min\": 0.0341012304712601,\n        \"max\": 4.977603044091133,\n        \"num_unique_values\": 30,\n        \"samples\": [\n          0.5993949163087964,\n          1.7852751724872369,\n          1.6179148974399715\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Self Processing Power\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.051651670479780025,\n        \"min\": 0.1031703265385662,\n        \"max\": 0.2892604784623056,\n        \"num_unique_values\": 30,\n        \"samples\": [\n          0.2215638498232123,\n          0.1865971291642217,\n          0.2679589410126549\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":13}]},{"cell_type":"markdown","source":["### 데이터 증강(추가)"],"metadata":{"id":"O3b6-6ESINbB"}},{"cell_type":"code","source":["# 원본 데이터 로드\n","original_data = pd.read_csv(network_path)\n","\n","# 원본 데이터의 기본 통계 출력\n","original_stats = original_data.describe()\n","original_stats"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":355},"id":"9rC0wXnuIQuX","executionInfo":{"status":"ok","timestamp":1721462992368,"user_tz":-540,"elapsed":3,"user":{"displayName":"박준용","userId":"07115448813094959321"}},"outputId":"8ad12864-2be4-4854-bdef-121fb0ec2995"},"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["           Timestamp         Hour    Bandwidth        Delay         Loss  \\\n","count    9828.000000  9828.000000  9828.000000  9828.000000  9828.000000   \n","mean   237229.549679    11.495116     8.744717    73.740104     0.651811   \n","std    137371.750130     6.950616    21.840745    23.915530     1.710981   \n","min         0.001533     0.000000     0.000000    31.542472     0.000000   \n","25%    117700.538411     5.000000     0.000000    51.318500     0.000000   \n","50%    236776.775244    12.000000     0.000000    71.458000     0.000000   \n","75%    355863.081672    18.000000     0.000000    92.948250     0.000000   \n","max    475030.614781    23.000000    96.640198   125.239000    20.000000   \n","\n","            Rating   Device CPU    Device BW  Device Delay  Device Loss  \\\n","count  9828.000000  9828.000000  9828.000000   9828.000000  9828.000000   \n","mean      2.599616     0.283629    57.774030     25.115383     2.278740   \n","std       0.598890     0.097970    25.944562     13.439036     1.487793   \n","min       1.500000     0.111274    12.599041      1.701485     0.034101   \n","25%       2.140000     0.189140    32.899224     13.716411     0.756002   \n","50%       2.570000     0.282103    62.047718     23.926546     2.188239   \n","75%       2.970000     0.378384    79.933500     37.680812     3.646679   \n","max       4.310000     0.451116    97.110265     47.466266     4.977603   \n","\n","       Device Self Processing  Cloud CPU Usage     Cloud BW  Cloud Latency  \\\n","count             9828.000000      9828.000000  9828.000000    9828.000000   \n","mean                 0.210925         0.506700   545.780390      16.446091   \n","std                  0.050782         0.267990   279.108798       8.689765   \n","min                  0.103170         0.000000     0.000000       0.000000   \n","25%                  0.173627         0.439263   490.994273      12.671802   \n","50%                  0.218807         0.610056   647.724901      19.072127   \n","75%                  0.256787         0.675839   755.208206      22.874168   \n","max                  0.289260         0.909073   839.902838      31.249603   \n","\n","       Network Activity  \n","count       9828.000000  \n","mean           0.602808  \n","std            0.307738  \n","min            0.100000  \n","25%            0.300000  \n","50%            0.700000  \n","75%            0.900000  \n","max            1.000000  "],"text/html":["\n","  <div id=\"df-f76fbd7d-40d2-4131-acd7-b32f80e5d49b\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Timestamp</th>\n","      <th>Hour</th>\n","      <th>Bandwidth</th>\n","      <th>Delay</th>\n","      <th>Loss</th>\n","      <th>Rating</th>\n","      <th>Device CPU</th>\n","      <th>Device BW</th>\n","      <th>Device Delay</th>\n","      <th>Device Loss</th>\n","      <th>Device Self Processing</th>\n","      <th>Cloud CPU Usage</th>\n","      <th>Cloud BW</th>\n","      <th>Cloud Latency</th>\n","      <th>Network Activity</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>9828.000000</td>\n","      <td>9828.000000</td>\n","      <td>9828.000000</td>\n","      <td>9828.000000</td>\n","      <td>9828.000000</td>\n","      <td>9828.000000</td>\n","      <td>9828.000000</td>\n","      <td>9828.000000</td>\n","      <td>9828.000000</td>\n","      <td>9828.000000</td>\n","      <td>9828.000000</td>\n","      <td>9828.000000</td>\n","      <td>9828.000000</td>\n","      <td>9828.000000</td>\n","      <td>9828.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>237229.549679</td>\n","      <td>11.495116</td>\n","      <td>8.744717</td>\n","      <td>73.740104</td>\n","      <td>0.651811</td>\n","      <td>2.599616</td>\n","      <td>0.283629</td>\n","      <td>57.774030</td>\n","      <td>25.115383</td>\n","      <td>2.278740</td>\n","      <td>0.210925</td>\n","      <td>0.506700</td>\n","      <td>545.780390</td>\n","      <td>16.446091</td>\n","      <td>0.602808</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>137371.750130</td>\n","      <td>6.950616</td>\n","      <td>21.840745</td>\n","      <td>23.915530</td>\n","      <td>1.710981</td>\n","      <td>0.598890</td>\n","      <td>0.097970</td>\n","      <td>25.944562</td>\n","      <td>13.439036</td>\n","      <td>1.487793</td>\n","      <td>0.050782</td>\n","      <td>0.267990</td>\n","      <td>279.108798</td>\n","      <td>8.689765</td>\n","      <td>0.307738</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>0.001533</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>31.542472</td>\n","      <td>0.000000</td>\n","      <td>1.500000</td>\n","      <td>0.111274</td>\n","      <td>12.599041</td>\n","      <td>1.701485</td>\n","      <td>0.034101</td>\n","      <td>0.103170</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.100000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>117700.538411</td>\n","      <td>5.000000</td>\n","      <td>0.000000</td>\n","      <td>51.318500</td>\n","      <td>0.000000</td>\n","      <td>2.140000</td>\n","      <td>0.189140</td>\n","      <td>32.899224</td>\n","      <td>13.716411</td>\n","      <td>0.756002</td>\n","      <td>0.173627</td>\n","      <td>0.439263</td>\n","      <td>490.994273</td>\n","      <td>12.671802</td>\n","      <td>0.300000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>236776.775244</td>\n","      <td>12.000000</td>\n","      <td>0.000000</td>\n","      <td>71.458000</td>\n","      <td>0.000000</td>\n","      <td>2.570000</td>\n","      <td>0.282103</td>\n","      <td>62.047718</td>\n","      <td>23.926546</td>\n","      <td>2.188239</td>\n","      <td>0.218807</td>\n","      <td>0.610056</td>\n","      <td>647.724901</td>\n","      <td>19.072127</td>\n","      <td>0.700000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>355863.081672</td>\n","      <td>18.000000</td>\n","      <td>0.000000</td>\n","      <td>92.948250</td>\n","      <td>0.000000</td>\n","      <td>2.970000</td>\n","      <td>0.378384</td>\n","      <td>79.933500</td>\n","      <td>37.680812</td>\n","      <td>3.646679</td>\n","      <td>0.256787</td>\n","      <td>0.675839</td>\n","      <td>755.208206</td>\n","      <td>22.874168</td>\n","      <td>0.900000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>475030.614781</td>\n","      <td>23.000000</td>\n","      <td>96.640198</td>\n","      <td>125.239000</td>\n","      <td>20.000000</td>\n","      <td>4.310000</td>\n","      <td>0.451116</td>\n","      <td>97.110265</td>\n","      <td>47.466266</td>\n","      <td>4.977603</td>\n","      <td>0.289260</td>\n","      <td>0.909073</td>\n","      <td>839.902838</td>\n","      <td>31.249603</td>\n","      <td>1.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f76fbd7d-40d2-4131-acd7-b32f80e5d49b')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-f76fbd7d-40d2-4131-acd7-b32f80e5d49b button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-f76fbd7d-40d2-4131-acd7-b32f80e5d49b');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-b656d262-1f7e-45b4-ba86-5ad533c3ce5f\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b656d262-1f7e-45b4-ba86-5ad533c3ce5f')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-b656d262-1f7e-45b4-ba86-5ad533c3ce5f button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_d49492b1-acb2-4650-afe2-0d4976c8c183\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('original_stats')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_d49492b1-acb2-4650-afe2-0d4976c8c183 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('original_stats');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"original_stats","summary":"{\n  \"name\": \"original_stats\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Timestamp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 164499.4985853084,\n        \"min\": 0.001533031463623,\n        \"max\": 475030.6147811413,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          237229.549678723,\n          236776.7752444744,\n          9828.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Hour\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3470.8691952216836,\n        \"min\": 0.0,\n        \"max\": 9828.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          11.495115995115995,\n          12.0,\n          9828.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bandwidth\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3468.4529708275118,\n        \"min\": 0.0,\n        \"max\": 9828.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          8.744716642122556,\n          96.64019771068564,\n          21.84074461146141\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Delay\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3451.130980249889,\n        \"min\": 23.91553044861988,\n        \"max\": 9828.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          73.74010406547191,\n          71.458,\n          9828.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Loss\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3473.6000563570237,\n        \"min\": 0.0,\n        \"max\": 9828.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.6518109314753618,\n          20.0,\n          1.7109810265656271\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Rating\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3473.8799936902656,\n        \"min\": 0.5988902982000204,\n        \"max\": 9828.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2.5996164021164025,\n          2.57,\n          9828.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Device CPU\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3474.632133662381,\n        \"min\": 0.09796979822982688,\n        \"max\": 9828.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.2836286179049123,\n          0.2821029321515653,\n          9828.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Device BW\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3456.234899671698,\n        \"min\": 12.599040784514026,\n        \"max\": 9828.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          57.77402993156492,\n          62.04771843600405,\n          9828.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Device Delay\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3466.517538758068,\n        \"min\": 1.7014850098311292,\n        \"max\": 9828.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          25.115382570151176,\n          23.926546158822767,\n          9828.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Device Loss\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3473.946814657594,\n        \"min\": 0.0341012304712601,\n        \"max\": 9828.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2.2787397739943063,\n          2.1882385082412097,\n          9828.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Device Self Processing\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3474.656894048882,\n        \"min\": 0.05078241556607028,\n        \"max\": 9828.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.2109251948679023,\n          0.2188069832123516,\n          9828.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Cloud CPU Usage\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3474.5505568676526,\n        \"min\": 0.0,\n        \"max\": 9828.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.506700233293298,\n          0.6100564560635828,\n          9828.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Cloud BW\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3305.865545422179,\n        \"min\": 0.0,\n        \"max\": 9828.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          545.7803902199283,\n          647.7249014393567,\n          9828.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Cloud Latency\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3469.1287525219846,\n        \"min\": 0.0,\n        \"max\": 9828.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          16.446090588313385,\n          19.072127377853946,\n          9828.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Network Activity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3474.5252241864946,\n        \"min\": 0.1,\n        \"max\": 9828.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.6028083028083029,\n          0.7,\n          9828.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","\n","# 노이즈 추가 함수\n","# 주어진 데이터에 노이즈를 추가하여 변형된 데이터를 반환합니다.\n","def add_noise(data, noise_level=0.01):\n","    return data * (1 + noise_level * np.random.randn(*data.shape))\n","\n","# 증강 데이터 생성 함수\n","# 원본 데이터를 주어진 배수만큼 증강하여 반환합니다.\n","def augment_data(df, factor=2):\n","    augmented_data = []\n","    for _ in range(factor):\n","        noisy_data = df.copy()  # 원본 데이터를 복사합니다.\n","        # 각 열에 노이즈를 추가합니다.\n","        noisy_data['Bandwidth'] = add_noise(noisy_data['Bandwidth'].values)\n","        noisy_data['Delay'] = add_noise(noisy_data['Delay'].values)\n","        noisy_data['Loss'] = add_noise(noisy_data['Loss'].values)\n","        noisy_data['Rating'] = add_noise(noisy_data['Rating'].values)\n","        noisy_data['Device CPU'] = add_noise(noisy_data['Device CPU'].values)\n","        noisy_data['Device BW'] = add_noise(noisy_data['Device BW'].values)\n","        noisy_data['Device Delay'] = add_noise(noisy_data['Device Delay'].values)\n","        noisy_data['Device Loss'] = add_noise(noisy_data['Device Loss'].values)\n","        noisy_data['Device Self Processing'] = add_noise(noisy_data['Device Self Processing'].values)\n","        noisy_data['Cloud CPU Usage'] = add_noise(noisy_data['Cloud CPU Usage'].values)\n","        noisy_data['Cloud BW'] = add_noise(noisy_data['Cloud BW'].values)\n","        noisy_data['Cloud Latency'] = add_noise(noisy_data['Cloud Latency'].values)\n","        noisy_data['Network Activity'] = add_noise(noisy_data['Network Activity'].values)\n","\n","        augmented_data.append(noisy_data)  # 노이즈가 추가된 데이터를 리스트에 추가합니다.\n","    return pd.concat(augmented_data, ignore_index=True)  # 리스트의 데이터를 하나의 데이터프레임으로 병합하여 반환합니다.\n","augmented_data = augment_data(original_data, factor=5) #-- 10배로\n","\n","#-- 아주 큰 데이터(1만개, 1000개에서 하는건 차이가 있을 수 있음)\n","#-- 적은 데이터에서 눈에 띄는걸 빠르게 테스트 하기위해\n","\n","# 증강된 데이터의 기본 통계 출력\n","augmented_stats = augmented_data.describe()"],"metadata":{"id":"sAh4_sHOIVsV","executionInfo":{"status":"ok","timestamp":1721462999396,"user_tz":-540,"elapsed":517,"user":{"displayName":"박준용","userId":"07115448813094959321"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","# 표준편차 비교\n","std_comparison = pd.DataFrame({\n","    'Original': original_stats.loc['std', ['Bandwidth', 'Delay', 'Loss', 'Rating']],\n","    'Augmented': augmented_stats.loc['std', ['Bandwidth', 'Delay', 'Loss', 'Rating']]\n","})\n","\n","# 분포 시각화 함수\n","def plot_distribution(data, column, title):\n","    plt.figure(figsize=(10, 6))\n","    plt.hist(data[column], bins=30, edgecolor='k', alpha=0.7)\n","    plt.title(title)\n","    plt.xlabel(column)\n","    plt.ylabel('Frequency')\n","    plt.show()\n","\n","# 각 열의 분포 시각화\n","for column in ['Bandwidth', 'Delay', 'Loss', 'Rating']:\n","    plot_distribution(original_data, column, f'Original Distribution of {column}')\n","    plot_distribution(augmented_data, column, f'Augmented Distribution of {column}')\n","\n","# 표준편차 비교 출력\n","std_comparison"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"UZGHHIH9IX-p","executionInfo":{"status":"ok","timestamp":1721463004707,"user_tz":-540,"elapsed":1883,"user":{"displayName":"박준용","userId":"07115448813094959321"}},"outputId":"de2c8a31-a91b-46b1-b090-7255101d1364"},"execution_count":16,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"execute_result","data":{"text/plain":["            Original  Augmented\n","Bandwidth  21.840745  21.841099\n","Delay      23.915530  23.918264\n","Loss        1.710981   1.710735\n","Rating      0.598890   0.599545"],"text/html":["\n","  <div id=\"df-9a65efad-8794-4f03-b913-0e8cfc8ffdfc\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Original</th>\n","      <th>Augmented</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Bandwidth</th>\n","      <td>21.840745</td>\n","      <td>21.841099</td>\n","    </tr>\n","    <tr>\n","      <th>Delay</th>\n","      <td>23.915530</td>\n","      <td>23.918264</td>\n","    </tr>\n","    <tr>\n","      <th>Loss</th>\n","      <td>1.710981</td>\n","      <td>1.710735</td>\n","    </tr>\n","    <tr>\n","      <th>Rating</th>\n","      <td>0.598890</td>\n","      <td>0.599545</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9a65efad-8794-4f03-b913-0e8cfc8ffdfc')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-9a65efad-8794-4f03-b913-0e8cfc8ffdfc button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-9a65efad-8794-4f03-b913-0e8cfc8ffdfc');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-41aaa1f7-0d52-4870-b8cb-bf9cdc033f43\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-41aaa1f7-0d52-4870-b8cb-bf9cdc033f43')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-41aaa1f7-0d52-4870-b8cb-bf9cdc033f43 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_5c265e2f-1412-4114-b266-9dc20165d8d4\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('std_comparison')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_5c265e2f-1412-4114-b266-9dc20165d8d4 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('std_comparison');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"std_comparison","summary":"{\n  \"name\": \"std_comparison\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"Original\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12.578662361476907,\n        \"min\": 0.5988902982000204,\n        \"max\": 23.91553044861988,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          23.91553044861988,\n          0.5988902982000204,\n          21.84074461146141\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Augmented\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12.579485904668788,\n        \"min\": 0.5995447557109804,\n        \"max\": 23.918264171741782,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          23.918264171741782,\n          0.5995447557109804,\n          21.841099383809915\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["print(\" augmented_data 평점 데이터 개수 : {}, 특성 데이터 개수 : {}\".format(augmented_data.shape[0], augmented_data.shape[1]))"],"metadata":{"id":"EBBOJCKXIa-V","executionInfo":{"status":"ok","timestamp":1721463039159,"user_tz":-540,"elapsed":1181,"user":{"displayName":"박준용","userId":"07115448813094959321"}},"outputId":"209298ca-86b5-42de-98de-c409ee280a0d","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":[" augmented_data 평점 데이터 개수 : 49140, 특성 데이터 개수 : 17\n"]}]},{"cell_type":"markdown","source":["### 2. EDA 및 데이터 전처리"],"metadata":{"id":"Y4-xQL43jZnU"}},{"cell_type":"markdown","source":["#### 1. MinMax정규화"],"metadata":{"id":"wwNh6Fxbjfgl"}},{"cell_type":"code","source":["from sklearn.preprocessing import MinMaxScaler\n","scaler = MinMaxScaler()\n","\n","augmented_data_scale = ['Timestamp', 'Bandwidth', 'Delay', 'Loss', 'Rating', 'Device CPU',\n","                 'Device BW', 'Device Delay', 'Device Loss', 'Device Self Processing',\n","                 'Cloud CPU Usage', 'Cloud BW', 'Cloud Latency']\n","augmented_data[augmented_data_scale] = scaler.fit_transform(augmented_data[augmented_data_scale])\n","# Applying MinMaxScaler\n","\n","cloud_scale = cloud.columns.difference(['Cloud ID'])\n","cloud[cloud_scale] = scaler.fit_transform(cloud[cloud_scale])\n","\n","# cloud_scale = ['Bandwidth (Mbps)', 'CPU']\n","# cloud[cloud_scale] = scaler.fit_transform(cloud[cloud_scale])\n","\n","smartphone_scale = smartphone.columns.difference(['Device ID'])\n","smartphone[smartphone_scale] = scaler.fit_transform(smartphone[smartphone_scale])"],"metadata":{"id":"n2OkehX1hEOq","executionInfo":{"status":"ok","timestamp":1721463043026,"user_tz":-540,"elapsed":539,"user":{"displayName":"박준용","userId":"07115448813094959321"}}},"execution_count":18,"outputs":[]},{"cell_type":"markdown","source":["#### 2. 네트워크 평점 0~5점으로 매핑(매핑 이후 MINMAX 해서... 매핑이 제대로 안되었다..)"],"metadata":{"id":"pTdhew9kjnXI"}},{"cell_type":"code","source":["# 평점의 최소값과 최대값 구하기\n","min_rating = augmented_data['Rating'].min()\n","max_rating = augmented_data['Rating'].max()\n","\n","# 평점 0점에서 5점으로 매핑하는 함수\n","def map_rating(rating, min_rating, max_rating):\n","    return round(5 * (rating - min_rating) / (max_rating - min_rating), 2)\n","\n","# 데이터 프레임에 새로운 컬럼으로 매핑된 평점 추가\n","augmented_data['Rating'] = augmented_data['Rating'].apply(map_rating, args=(min_rating, max_rating))\n","augmented_data.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":241},"id":"jIuEo6_nPn46","executionInfo":{"status":"ok","timestamp":1721463062102,"user_tz":-540,"elapsed":548,"user":{"displayName":"박준용","userId":"07115448813094959321"}},"outputId":"c92b7945-906d-4e44-e7d4-51e5fbbc5d49"},"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Timestamp  Hour   Device Selected Entity  Bandwidth     Delay  Loss  \\\n","0        0.0     0  device1          cloud2        0.0  0.285374   0.0   \n","1        0.0     0  device2          cloud5        0.0  0.567294   0.0   \n","2        0.0     0  device3          cloud4        0.0  0.513606   0.0   \n","3        0.0     0  device4          cloud3        0.0  0.766627   0.0   \n","4        0.0     0  device5          cloud3        0.0  0.909981   0.0   \n","\n","   Rating  Device CPU  Device BW  Device Delay  Device Loss  \\\n","0    2.35    0.207644   0.511380      0.248968     0.058056   \n","1    1.50    0.870789   0.749259      0.434303     0.713011   \n","2    1.56    0.457363   0.575037      0.292355     0.846623   \n","3    0.82    0.664994   0.964508      0.630938     0.130658   \n","4    0.15    0.108831   0.950198      0.806858     0.941640   \n","\n","   Device Self Processing  Cloud CPU Usage  Cloud BW  Cloud Latency  \\\n","0                0.540002         0.623284  0.928045       0.425758   \n","1                0.869043         0.486575  0.771632       0.581668   \n","2                0.720950         0.598344  0.697696       0.732736   \n","3                0.166018         0.717027  0.597297       0.589754   \n","4                0.521633         0.718461  0.596176       0.597712   \n","\n","   Network Activity  \n","0          0.196454  \n","1          0.199757  \n","2          0.203070  \n","3          0.198183  \n","4          0.202627  "],"text/html":["\n","  <div id=\"df-47c2ec7b-6c90-4d38-beb6-2d86755053d9\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Timestamp</th>\n","      <th>Hour</th>\n","      <th>Device</th>\n","      <th>Selected Entity</th>\n","      <th>Bandwidth</th>\n","      <th>Delay</th>\n","      <th>Loss</th>\n","      <th>Rating</th>\n","      <th>Device CPU</th>\n","      <th>Device BW</th>\n","      <th>Device Delay</th>\n","      <th>Device Loss</th>\n","      <th>Device Self Processing</th>\n","      <th>Cloud CPU Usage</th>\n","      <th>Cloud BW</th>\n","      <th>Cloud Latency</th>\n","      <th>Network Activity</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>device1</td>\n","      <td>cloud2</td>\n","      <td>0.0</td>\n","      <td>0.285374</td>\n","      <td>0.0</td>\n","      <td>2.35</td>\n","      <td>0.207644</td>\n","      <td>0.511380</td>\n","      <td>0.248968</td>\n","      <td>0.058056</td>\n","      <td>0.540002</td>\n","      <td>0.623284</td>\n","      <td>0.928045</td>\n","      <td>0.425758</td>\n","      <td>0.196454</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>device2</td>\n","      <td>cloud5</td>\n","      <td>0.0</td>\n","      <td>0.567294</td>\n","      <td>0.0</td>\n","      <td>1.50</td>\n","      <td>0.870789</td>\n","      <td>0.749259</td>\n","      <td>0.434303</td>\n","      <td>0.713011</td>\n","      <td>0.869043</td>\n","      <td>0.486575</td>\n","      <td>0.771632</td>\n","      <td>0.581668</td>\n","      <td>0.199757</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>device3</td>\n","      <td>cloud4</td>\n","      <td>0.0</td>\n","      <td>0.513606</td>\n","      <td>0.0</td>\n","      <td>1.56</td>\n","      <td>0.457363</td>\n","      <td>0.575037</td>\n","      <td>0.292355</td>\n","      <td>0.846623</td>\n","      <td>0.720950</td>\n","      <td>0.598344</td>\n","      <td>0.697696</td>\n","      <td>0.732736</td>\n","      <td>0.203070</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>device4</td>\n","      <td>cloud3</td>\n","      <td>0.0</td>\n","      <td>0.766627</td>\n","      <td>0.0</td>\n","      <td>0.82</td>\n","      <td>0.664994</td>\n","      <td>0.964508</td>\n","      <td>0.630938</td>\n","      <td>0.130658</td>\n","      <td>0.166018</td>\n","      <td>0.717027</td>\n","      <td>0.597297</td>\n","      <td>0.589754</td>\n","      <td>0.198183</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>device5</td>\n","      <td>cloud3</td>\n","      <td>0.0</td>\n","      <td>0.909981</td>\n","      <td>0.0</td>\n","      <td>0.15</td>\n","      <td>0.108831</td>\n","      <td>0.950198</td>\n","      <td>0.806858</td>\n","      <td>0.941640</td>\n","      <td>0.521633</td>\n","      <td>0.718461</td>\n","      <td>0.596176</td>\n","      <td>0.597712</td>\n","      <td>0.202627</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-47c2ec7b-6c90-4d38-beb6-2d86755053d9')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-47c2ec7b-6c90-4d38-beb6-2d86755053d9 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-47c2ec7b-6c90-4d38-beb6-2d86755053d9');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-25f06c30-45ec-4ef9-a4d3-13a4b236e7b6\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-25f06c30-45ec-4ef9-a4d3-13a4b236e7b6')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-25f06c30-45ec-4ef9-a4d3-13a4b236e7b6 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"augmented_data","summary":"{\n  \"name\": \"augmented_data\",\n  \"rows\": 49140,\n  \"fields\": [\n    {\n      \"column\": \"Timestamp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.28917327649135455,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 328,\n        \"samples\": [\n          0.706330416017457,\n          0.3363834553680722,\n          0.7644538184138969\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Hour\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6,\n        \"min\": 0,\n        \"max\": 23,\n        \"num_unique_values\": 24,\n        \"samples\": [\n          19,\n          8,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Device\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 30,\n        \"samples\": [\n          \"device28\",\n          \"device16\",\n          \"device24\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Selected Entity\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"cloud2\",\n          \"cloud5\",\n          \"cloud1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bandwidth\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2206715214563953,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 8881,\n        \"samples\": [\n          0.850320445122405,\n          0.15880179854376178,\n          0.16872347602286453\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Delay\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.24507992975072102,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 49140,\n        \"samples\": [\n          0.5944182445503825,\n          0.27092832881216933,\n          0.6521385888428962\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Loss\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.08391377717099394,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 9466,\n        \"samples\": [\n          0.48222362587784756,\n          0.07918009543054969,\n          0.0782839574103587\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Rating\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0163837402015394,\n        \"min\": 0.0,\n        \"max\": 5.0,\n        \"num_unique_values\": 483,\n        \"samples\": [\n          4.01,\n          4.85,\n          0.71\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Device CPU\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2727551783160273,\n        \"min\": 0.0,\n        \"max\": 0.9999999999999999,\n        \"num_unique_values\": 49140,\n        \"samples\": [\n          0.12765728124460424,\n          0.21352238612822372,\n          0.9544470108674253\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Device BW\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.29376326941351877,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 49140,\n        \"samples\": [\n          0.42959965602606803,\n          0.49450086567552604,\n          0.871638440227142\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Device Delay\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2836353878768399,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 49140,\n        \"samples\": [\n          0.4697339642936256,\n          0.2587680606687918,\n          0.5464633810415193\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Device Loss\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2916982346299263,\n        \"min\": 0.0,\n        \"max\": 0.9999999999999999,\n        \"num_unique_values\": 49140,\n        \"samples\": [\n          0.44664042131898163,\n          0.059935061225702815,\n          0.4958978096442868\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Device Self Processing\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2563365948260114,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 49140,\n        \"samples\": [\n          0.2833386707358224,\n          0.5570621133198181,\n          0.9321700409322511\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Cloud CPU Usage\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2913583885329803,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 40261,\n        \"samples\": [\n          0.4377410578898721,\n          0.5995193972329287,\n          0.9762840762299629\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Cloud BW\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3217317435326982,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 40261,\n        \"samples\": [\n          0.5980512060697998,\n          0.7994526259475998,\n          0.9121097599546283\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Cloud Latency\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.27042297895793455,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 40261,\n        \"samples\": [\n          0.5515787421672131,\n          0.7096203938375683,\n          0.6565822044402116\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Network Activity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.30777740789347263,\n        \"min\": 0.09654467701692422,\n        \"max\": 1.0350885186168126,\n        \"num_unique_values\": 49140,\n        \"samples\": [\n          0.49751633471983114,\n          0.5923753371346773,\n          0.9197417421953579\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["cloud.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":273},"id":"eTOfkK4hkWf2","executionInfo":{"status":"ok","timestamp":1721463063632,"user_tz":-540,"elapsed":4,"user":{"displayName":"박준용","userId":"07115448813094959321"}},"outputId":"bd0ec665-33cf-4f65-9226-79948e50a1a5"},"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Cloud ID     CPU_0     CPU_1     CPU_2     CPU_3     CPU_4     CPU_5  \\\n","0         1  0.295215  0.706914  1.000000  0.137750  0.291507  0.429720   \n","1         2  0.613419  1.000000  0.000000  1.000000  1.000000  0.807032   \n","2         3  1.000000  0.000000  0.293306  0.529576  0.000000  0.928350   \n","3         4  0.459024  0.304142  0.563432  0.000000  0.401409  1.000000   \n","4         5  0.000000  0.492960  0.276259  0.847332  0.704974  0.000000   \n","\n","      CPU_6     CPU_7     CPU_8  ...  Latency_14  Latency_15  Latency_16  \\\n","0  0.523982  0.540461  1.000000  ...    0.262911    0.691458    0.391386   \n","1  1.000000  1.000000  0.494995  ...    0.485245    0.783727    1.000000   \n","2  0.755572  0.244884  0.599071  ...    0.929807    0.000000    0.458752   \n","3  0.000000  0.000000  0.368788  ...    1.000000    0.729928    0.000000   \n","4  0.087957  0.930268  0.000000  ...    0.000000    1.000000    0.839105   \n","\n","   Latency_17  Latency_18  Latency_19  Latency_20  Latency_21  Latency_22  \\\n","0    0.668838    0.000000    0.208360    0.000000    0.315796    0.318848   \n","1    0.000000    0.406977    1.000000    0.265743    0.829518    1.000000   \n","2    0.640549    0.074129    0.148736    1.000000    0.222319    0.015416   \n","3    1.000000    1.000000    0.000000    0.597050    0.000000    0.000000   \n","4    0.560292    0.809882    0.580571    0.772845    1.000000    0.593330   \n","\n","   Latency_23  \n","0    0.856676  \n","1    0.713590  \n","2    1.000000  \n","3    0.000000  \n","4    0.802316  \n","\n","[5 rows x 73 columns]"],"text/html":["\n","  <div id=\"df-4f81565c-25f9-4eeb-9d57-4a8225fc5f0e\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Cloud ID</th>\n","      <th>CPU_0</th>\n","      <th>CPU_1</th>\n","      <th>CPU_2</th>\n","      <th>CPU_3</th>\n","      <th>CPU_4</th>\n","      <th>CPU_5</th>\n","      <th>CPU_6</th>\n","      <th>CPU_7</th>\n","      <th>CPU_8</th>\n","      <th>...</th>\n","      <th>Latency_14</th>\n","      <th>Latency_15</th>\n","      <th>Latency_16</th>\n","      <th>Latency_17</th>\n","      <th>Latency_18</th>\n","      <th>Latency_19</th>\n","      <th>Latency_20</th>\n","      <th>Latency_21</th>\n","      <th>Latency_22</th>\n","      <th>Latency_23</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>0.295215</td>\n","      <td>0.706914</td>\n","      <td>1.000000</td>\n","      <td>0.137750</td>\n","      <td>0.291507</td>\n","      <td>0.429720</td>\n","      <td>0.523982</td>\n","      <td>0.540461</td>\n","      <td>1.000000</td>\n","      <td>...</td>\n","      <td>0.262911</td>\n","      <td>0.691458</td>\n","      <td>0.391386</td>\n","      <td>0.668838</td>\n","      <td>0.000000</td>\n","      <td>0.208360</td>\n","      <td>0.000000</td>\n","      <td>0.315796</td>\n","      <td>0.318848</td>\n","      <td>0.856676</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>0.613419</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>0.807032</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>0.494995</td>\n","      <td>...</td>\n","      <td>0.485245</td>\n","      <td>0.783727</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>0.406977</td>\n","      <td>1.000000</td>\n","      <td>0.265743</td>\n","      <td>0.829518</td>\n","      <td>1.000000</td>\n","      <td>0.713590</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>0.293306</td>\n","      <td>0.529576</td>\n","      <td>0.000000</td>\n","      <td>0.928350</td>\n","      <td>0.755572</td>\n","      <td>0.244884</td>\n","      <td>0.599071</td>\n","      <td>...</td>\n","      <td>0.929807</td>\n","      <td>0.000000</td>\n","      <td>0.458752</td>\n","      <td>0.640549</td>\n","      <td>0.074129</td>\n","      <td>0.148736</td>\n","      <td>1.000000</td>\n","      <td>0.222319</td>\n","      <td>0.015416</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>0.459024</td>\n","      <td>0.304142</td>\n","      <td>0.563432</td>\n","      <td>0.000000</td>\n","      <td>0.401409</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.368788</td>\n","      <td>...</td>\n","      <td>1.000000</td>\n","      <td>0.729928</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>0.597050</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>0.000000</td>\n","      <td>0.492960</td>\n","      <td>0.276259</td>\n","      <td>0.847332</td>\n","      <td>0.704974</td>\n","      <td>0.000000</td>\n","      <td>0.087957</td>\n","      <td>0.930268</td>\n","      <td>0.000000</td>\n","      <td>...</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","      <td>0.839105</td>\n","      <td>0.560292</td>\n","      <td>0.809882</td>\n","      <td>0.580571</td>\n","      <td>0.772845</td>\n","      <td>1.000000</td>\n","      <td>0.593330</td>\n","      <td>0.802316</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 73 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4f81565c-25f9-4eeb-9d57-4a8225fc5f0e')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-4f81565c-25f9-4eeb-9d57-4a8225fc5f0e button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-4f81565c-25f9-4eeb-9d57-4a8225fc5f0e');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-c27788ff-db33-4594-9504-097253febe81\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c27788ff-db33-4594-9504-097253febe81')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-c27788ff-db33-4594-9504-097253febe81 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"cloud"}},"metadata":{},"execution_count":21}]},{"cell_type":"code","source":["smartphone.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"ZGl8AqvLkTmu","executionInfo":{"status":"ok","timestamp":1720703988135,"user_tz":-540,"elapsed":3,"user":{"displayName":"박준용","userId":"07115448813094959321"}},"outputId":"f42d718f-05fd-4e0e-f804-9644843a37d1"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Device ID       CPU  Bandwidth     Delay      Loss  Self Processing Power\n","0          1  0.508869   0.614335  0.005573  0.526873               0.000000\n","1          2  0.399741   0.909815  0.782230  0.000000               0.968511\n","2          3  0.720535   0.000000  0.210305  0.874256               1.000000\n","3          4  0.175313   0.499753  0.987620  0.051776               0.074302\n","4          5  0.600719   1.000000  0.674575  0.482372               0.115604"],"text/html":["\n","  <div id=\"df-355b4a6f-18b6-429a-afbb-16261ade13bb\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Device ID</th>\n","      <th>CPU</th>\n","      <th>Bandwidth</th>\n","      <th>Delay</th>\n","      <th>Loss</th>\n","      <th>Self Processing Power</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>0.508869</td>\n","      <td>0.614335</td>\n","      <td>0.005573</td>\n","      <td>0.526873</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>0.399741</td>\n","      <td>0.909815</td>\n","      <td>0.782230</td>\n","      <td>0.000000</td>\n","      <td>0.968511</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>0.720535</td>\n","      <td>0.000000</td>\n","      <td>0.210305</td>\n","      <td>0.874256</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>0.175313</td>\n","      <td>0.499753</td>\n","      <td>0.987620</td>\n","      <td>0.051776</td>\n","      <td>0.074302</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>0.600719</td>\n","      <td>1.000000</td>\n","      <td>0.674575</td>\n","      <td>0.482372</td>\n","      <td>0.115604</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-355b4a6f-18b6-429a-afbb-16261ade13bb')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-355b4a6f-18b6-429a-afbb-16261ade13bb button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-355b4a6f-18b6-429a-afbb-16261ade13bb');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-2d9c442a-eb8f-48e4-abc2-b5921d0aa23f\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2d9c442a-eb8f-48e4-abc2-b5921d0aa23f')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-2d9c442a-eb8f-48e4-abc2-b5921d0aa23f button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"smartphone","summary":"{\n  \"name\": \"smartphone\",\n  \"rows\": 15,\n  \"fields\": [\n    {\n      \"column\": \"Device ID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4,\n        \"min\": 1,\n        \"max\": 15,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          10,\n          12,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CPU\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.28278736862896375,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          0.4003428948063853,\n          1.0,\n          0.5088687882189868\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bandwidth\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.32455036744864346,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          0.7750585265843735,\n          0.18198189707677062,\n          0.6143352202872722\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Delay\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.37254134640027925,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          0.0,\n          0.981862746435141,\n          0.005573152480058324\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Loss\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.30865438884312874,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          0.3211753126747461,\n          0.25952305566764894,\n          0.5268732507969054\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Self Processing Power\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3212569364918135,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          0.33365456547678507,\n          0.7137018272419424,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":105}]},{"cell_type":"code","source":["augmented_data.head(10)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":363},"id":"Emv07Wf4kRcV","executionInfo":{"status":"ok","timestamp":1720708966005,"user_tz":-540,"elapsed":1147,"user":{"displayName":"박준용","userId":"07115448813094959321"}},"outputId":"72dea787-1ee0-4518-961d-f31c3f8bb29e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Timestamp  Hour    Device Selected Entity  Bandwidth     Delay      Loss  \\\n","0        0.0     0   device1          cloud5   0.000000  0.096779  0.000000   \n","1        0.0     0   device2            self   0.911987  0.089700  0.004421   \n","2        0.0     0   device3          cloud1   0.000000  0.429686  0.000000   \n","3        0.0     0   device4            self   0.546970  0.178894  0.024505   \n","4        0.0     0   device5            self   0.962002  0.033300  0.188847   \n","5        0.0     0   device6            self   0.895378  0.040354  0.385168   \n","6        0.0     0   device7            self   0.625969  0.180890  0.125834   \n","7        0.0     0   device8          cloud2   0.000000  0.239396  0.000000   \n","8        0.0     0   device9          cloud5   0.000000  0.662976  0.000000   \n","9        0.0     0  device10          cloud4   0.000000  0.295435  0.000000   \n","\n","   Rating  Device CPU  Device BW  Device Delay  Device Loss  \\\n","0    3.09    0.490573   0.589630      0.007914     0.510871   \n","1    4.54    0.392737   0.884090      0.747672     0.000357   \n","2    1.94    0.696112   0.006281      0.207038     0.846176   \n","3    3.68    0.184159   0.487011      0.940099     0.051155   \n","4    4.65    0.560320   0.960608      0.672008     0.466561   \n","5    4.39    0.865617   0.870311      0.670913     0.976206   \n","6    3.70    0.740434   0.555619      0.970987     0.314714   \n","7    2.59    0.635372   0.887855      0.026865     0.562600   \n","8    1.16    0.855753   0.184398      0.590913     0.392818   \n","9    2.36    0.388379   0.768781      0.002853     0.308372   \n","\n","   Device Self Processing  Cloud CPU Usage  Cloud BW  Cloud Latency  \\\n","0                0.015377         0.628118  0.705878       0.383602   \n","1                0.917772         0.000000  0.000000       0.000000   \n","2                0.943690         0.822421  0.774763       0.555589   \n","3                0.079728         0.000000  0.000000       0.000000   \n","4                0.124589         0.000000  0.000000       0.000000   \n","5                0.273601         0.000000  0.000000       0.000000   \n","6                0.564755         0.000000  0.000000       0.000000   \n","7                0.582329         0.473772  0.738140       0.532059   \n","8                0.599521         0.634838  0.689588       0.383350   \n","9                0.332235         0.850963  0.742454       0.667537   \n","\n","   Network Activity  \n","0          0.200262  \n","1          0.200121  \n","2          0.196439  \n","3          0.201440  \n","4          0.202929  \n","5          0.200371  \n","6          0.202052  \n","7          0.198094  \n","8          0.194689  \n","9          0.196845  "],"text/html":["\n","  <div id=\"df-316150c8-5e75-461c-8564-2f5eae1f98c7\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Timestamp</th>\n","      <th>Hour</th>\n","      <th>Device</th>\n","      <th>Selected Entity</th>\n","      <th>Bandwidth</th>\n","      <th>Delay</th>\n","      <th>Loss</th>\n","      <th>Rating</th>\n","      <th>Device CPU</th>\n","      <th>Device BW</th>\n","      <th>Device Delay</th>\n","      <th>Device Loss</th>\n","      <th>Device Self Processing</th>\n","      <th>Cloud CPU Usage</th>\n","      <th>Cloud BW</th>\n","      <th>Cloud Latency</th>\n","      <th>Network Activity</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>device1</td>\n","      <td>cloud5</td>\n","      <td>0.000000</td>\n","      <td>0.096779</td>\n","      <td>0.000000</td>\n","      <td>3.09</td>\n","      <td>0.490573</td>\n","      <td>0.589630</td>\n","      <td>0.007914</td>\n","      <td>0.510871</td>\n","      <td>0.015377</td>\n","      <td>0.628118</td>\n","      <td>0.705878</td>\n","      <td>0.383602</td>\n","      <td>0.200262</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>device2</td>\n","      <td>self</td>\n","      <td>0.911987</td>\n","      <td>0.089700</td>\n","      <td>0.004421</td>\n","      <td>4.54</td>\n","      <td>0.392737</td>\n","      <td>0.884090</td>\n","      <td>0.747672</td>\n","      <td>0.000357</td>\n","      <td>0.917772</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.200121</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>device3</td>\n","      <td>cloud1</td>\n","      <td>0.000000</td>\n","      <td>0.429686</td>\n","      <td>0.000000</td>\n","      <td>1.94</td>\n","      <td>0.696112</td>\n","      <td>0.006281</td>\n","      <td>0.207038</td>\n","      <td>0.846176</td>\n","      <td>0.943690</td>\n","      <td>0.822421</td>\n","      <td>0.774763</td>\n","      <td>0.555589</td>\n","      <td>0.196439</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>device4</td>\n","      <td>self</td>\n","      <td>0.546970</td>\n","      <td>0.178894</td>\n","      <td>0.024505</td>\n","      <td>3.68</td>\n","      <td>0.184159</td>\n","      <td>0.487011</td>\n","      <td>0.940099</td>\n","      <td>0.051155</td>\n","      <td>0.079728</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.201440</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>device5</td>\n","      <td>self</td>\n","      <td>0.962002</td>\n","      <td>0.033300</td>\n","      <td>0.188847</td>\n","      <td>4.65</td>\n","      <td>0.560320</td>\n","      <td>0.960608</td>\n","      <td>0.672008</td>\n","      <td>0.466561</td>\n","      <td>0.124589</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.202929</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>device6</td>\n","      <td>self</td>\n","      <td>0.895378</td>\n","      <td>0.040354</td>\n","      <td>0.385168</td>\n","      <td>4.39</td>\n","      <td>0.865617</td>\n","      <td>0.870311</td>\n","      <td>0.670913</td>\n","      <td>0.976206</td>\n","      <td>0.273601</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.200371</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>device7</td>\n","      <td>self</td>\n","      <td>0.625969</td>\n","      <td>0.180890</td>\n","      <td>0.125834</td>\n","      <td>3.70</td>\n","      <td>0.740434</td>\n","      <td>0.555619</td>\n","      <td>0.970987</td>\n","      <td>0.314714</td>\n","      <td>0.564755</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.202052</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>device8</td>\n","      <td>cloud2</td>\n","      <td>0.000000</td>\n","      <td>0.239396</td>\n","      <td>0.000000</td>\n","      <td>2.59</td>\n","      <td>0.635372</td>\n","      <td>0.887855</td>\n","      <td>0.026865</td>\n","      <td>0.562600</td>\n","      <td>0.582329</td>\n","      <td>0.473772</td>\n","      <td>0.738140</td>\n","      <td>0.532059</td>\n","      <td>0.198094</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>device9</td>\n","      <td>cloud5</td>\n","      <td>0.000000</td>\n","      <td>0.662976</td>\n","      <td>0.000000</td>\n","      <td>1.16</td>\n","      <td>0.855753</td>\n","      <td>0.184398</td>\n","      <td>0.590913</td>\n","      <td>0.392818</td>\n","      <td>0.599521</td>\n","      <td>0.634838</td>\n","      <td>0.689588</td>\n","      <td>0.383350</td>\n","      <td>0.194689</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>device10</td>\n","      <td>cloud4</td>\n","      <td>0.000000</td>\n","      <td>0.295435</td>\n","      <td>0.000000</td>\n","      <td>2.36</td>\n","      <td>0.388379</td>\n","      <td>0.768781</td>\n","      <td>0.002853</td>\n","      <td>0.308372</td>\n","      <td>0.332235</td>\n","      <td>0.850963</td>\n","      <td>0.742454</td>\n","      <td>0.667537</td>\n","      <td>0.196845</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-316150c8-5e75-461c-8564-2f5eae1f98c7')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-316150c8-5e75-461c-8564-2f5eae1f98c7 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-316150c8-5e75-461c-8564-2f5eae1f98c7');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-76b2f10c-ec8d-4d06-a867-4fe5cb8d010b\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-76b2f10c-ec8d-4d06-a867-4fe5cb8d010b')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-76b2f10c-ec8d-4d06-a867-4fe5cb8d010b button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"augmented_data","summary":"{\n  \"name\": \"augmented_data\",\n  \"rows\": 9000,\n  \"fields\": [\n    {\n      \"column\": \"Timestamp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2911298010462304,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 120,\n        \"samples\": [\n          0.36981930433019633,\n          0.3950942368934128,\n          0.03367701485374544\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Hour\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6,\n        \"min\": 0,\n        \"max\": 23,\n        \"num_unique_values\": 24,\n        \"samples\": [\n          9,\n          19,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Device\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 15,\n        \"samples\": [\n          \"device10\",\n          \"device12\",\n          \"device1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Selected Entity\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"cloud5\",\n          \"self\",\n          \"cloud3\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bandwidth\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3326433876425902,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 5241,\n        \"samples\": [\n          0.5294492976525943,\n          0.28819368228317815,\n          0.8832124390947392\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Delay\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2575732392652189,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 9000,\n        \"samples\": [\n          0.8349763012418729,\n          0.3183039672776365,\n          0.07194224877578637\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Loss\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1140065774326057,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 5271,\n        \"samples\": [\n          0.04498594838998579,\n          0.007512638395786871,\n          0.2809488651481841\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Rating\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.2694651689640017,\n        \"min\": 0.0,\n        \"max\": 5.0,\n        \"num_unique_values\": 450,\n        \"samples\": [\n          0.25,\n          0.6,\n          3.37\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Device CPU\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.25799144932999385,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 9000,\n        \"samples\": [\n          0.8916513102452839,\n          0.6338782735764241,\n          0.7158618137271953\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Device BW\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.30026889040602356,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 9000,\n        \"samples\": [\n          0.8583798499182345,\n          0.8941111169457145,\n          0.4530606815012765\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Device Delay\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.34823666159968786,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 9000,\n        \"samples\": [\n          0.6717730252953171,\n          0.030658949173728536,\n          0.7310251559420705\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Device Loss\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.28962580211935723,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 9000,\n        \"samples\": [\n          0.9646797350491755,\n          0.5595459768603265,\n          0.10247427415420873\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Device Self Processing\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.29037012255420663,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 9000,\n        \"samples\": [\n          0.29705506667566767,\n          0.5573256094204709,\n          0.675460069296615\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Cloud CPU Usage\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3597836239749369,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 3761,\n        \"samples\": [\n          0.6718090103683731,\n          0.7648501529547216,\n          0.5885165576840226\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Cloud BW\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3573177040605187,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 3761,\n        \"samples\": [\n          0.7736552125795207,\n          0.7476035490716729,\n          0.8629297983231967\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Cloud Latency\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2916529389897751,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 3761,\n        \"samples\": [\n          0.5767066705919025,\n          0.5896660191975321,\n          0.5697844659089455\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Network Activity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3049866603851999,\n        \"min\": 0.09672932302565991,\n        \"max\": 1.0335369718246512,\n        \"num_unique_values\": 9000,\n        \"samples\": [\n          0.9128858784064123,\n          0.59050281617884,\n          0.5999445523319274\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":163}]},{"cell_type":"markdown","source":["### 3. 데이터 시각화"],"metadata":{"id":"xiu12clA0W1c"}},{"cell_type":"code","source":["import networkx as nx\n","import matplotlib.pyplot as plt\n","import torch\n","from torch_sparse import SparseTensor\n","from sklearn.model_selection import train_test_split\n","import pandas as pd\n","import numpy as np\n","\n","#-- 데이터 경로 설정\n","path = [network_path, device_path]  #-- 평점 데이터, 디바이스 데이터\n","data_frame = ['Selected Entity', 'Device', 'Rating']  #-- 평점 데이터에 있는 클라우드, 단말노드, Rating 값\n","\n","def NGCF_data(path, data_frame, rating_threshold=0, excluded_user=None, remove_size=10):\n","    # 데이터 로드\n","    rating_data = augmented_data #-- 증강 데이터로 대체\n","    device_data = pd.read_csv(path[1])\n","\n","    # 통합된 매핑 생성\n","    combined_mapping = {}\n","    idx = 0\n","    for cloud in rating_data[data_frame[0]].unique():\n","        combined_mapping[('cloud', cloud)] = idx\n","        idx += 1\n","    for device in device_data['Device ID'].unique():\n","        combined_mapping[('device', device)] = idx\n","        idx += 1\n","\n","    # 디버깅을 위한 출력\n","    print(\"Combined Mapping:\", combined_mapping)\n","\n","    # 엣지 연결 및 Rating 평균 계산을 위한 딕셔너리\n","    edge_index = [[], []]\n","    edge_ratings = {}\n","    src = [combined_mapping[('cloud', index)] for index in rating_data[data_frame[0]]]\n","    dst = [combined_mapping[('device', int(index.replace('device', '')))] for index in rating_data[data_frame[1]]]\n","    edge_attr = rating_data[data_frame[2]].values\n","\n","    # 매핑되지 않은 값이 있는지 확인\n","    if -1 in src or -1 in dst:\n","        raise ValueError(\"Mapping에 없는 값이 network 데이터프레임에 있습니다.\")\n","\n","    for i in range(len(edge_attr)):\n","        if edge_attr[i] >= rating_threshold:\n","            edge = (src[i], dst[i])\n","            edge_index[0].append(src[i])\n","            edge_index[1].append(dst[i])\n","            if edge in edge_ratings:\n","                edge_ratings[edge].append(edge_attr[i])\n","            else:\n","                edge_ratings[edge] = [edge_attr[i]]\n","\n","    if not edge_index[0]:\n","        raise ValueError(\"No edges meet the rating threshold.\")\n","\n","    edge_index = torch.tensor(edge_index)\n","\n","    # 데이터 분할 8:1:1\n","    num_nodes = len(combined_mapping)\n","    num_interactions = edge_index.shape[1]\n","\n","    if num_interactions == 0:\n","        raise ValueError(\"No interactions found. Check your data or adjust the rating threshold.\")\n","\n","    all_indices = [i for i in range(num_interactions)]\n","\n","    train_indices, test_indices = train_test_split(all_indices, test_size=0.2, random_state=1)\n","    val_indices, test_indices = train_test_split(test_indices, test_size=0.5, random_state=1)\n","\n","    train_edge_index = edge_index[:, train_indices]\n","    val_edge_index = edge_index[:, val_indices]\n","    test_edge_index = edge_index[:, test_indices]\n","\n","    print(\"Train Edge Data : \", train_edge_index.shape)\n","    print(\"Val Edge Data :\", val_edge_index.shape)\n","    print(\"Test Edge Data : \", test_edge_index.shape)\n","\n","    train_sparse_edge_index = SparseTensor(row=train_edge_index[0], col=train_edge_index[1], sparse_sizes=(num_nodes, num_nodes))\n","    val_sparse_edge_index = SparseTensor(row=val_edge_index[0], col=val_edge_index[1], sparse_sizes=(num_nodes, num_nodes))\n","    test_sparse_edge_index = SparseTensor(row=test_edge_index[0], col=test_edge_index[1], sparse_sizes=(num_nodes, num_nodes))\n","\n","    tet_edge_data = [edge_index, train_edge_index, val_edge_index, test_edge_index]\n","    tet_sparse_data = [train_sparse_edge_index, val_sparse_edge_index, test_sparse_edge_index]\n","\n","    # Create NetworkX graph for visualization\n","    G = nx.Graph()\n","\n","    # Add nodes with device and cloud server mappings\n","    for (node_type, node), idx in combined_mapping.items():\n","        if node_type == 'device':\n","            G.add_node(idx, label=f'device_{node}', node_color='blue')\n","        elif node == 'self':\n","            G.add_node(idx, label='self', node_color='green')\n","        else:\n","            G.add_node(idx, label=f'cloud_{node}', node_color='red')\n","\n","    # Add edges to the graph with average ratings as weights\n","    for edge, ratings in edge_ratings.items():\n","        avg_rating = np.mean(ratings)\n","        G.add_edge(edge[0], edge[1], weight=avg_rating)\n","\n","    return tet_edge_data, tet_sparse_data, combined_mapping, G\n","\n"],"metadata":{"id":"zrswvf9r9y3g","executionInfo":{"status":"ok","timestamp":1721463067773,"user_tz":-540,"elapsed":818,"user":{"displayName":"박준용","userId":"07115448813094959321"}}},"execution_count":22,"outputs":[]},{"cell_type":"code","source":["network_path = data_path + 'simulation_results.csv'\n","device_path = data_path + 'device_characteristics.csv'\n","\n","path = [network_path, device_path]  #-- 평점 데이터, 디바이스 데이터\n","data_frame = ['Selected Entity', 'Device', 'Rating']  #-- 평점 데이터에 있는 클라우드, 단말노드, Rating 값\n","# Call the function\n","tet_edge_data, tet_sparse_data, combined_mapping, G = NGCF_data(path, data_frame)\n","\n","# Visualize the graph\n","plt.figure(figsize=(10, 8))\n","pos = nx.spring_layout(G, seed=2024)\n","labels = nx.get_node_attributes(G, 'label')\n","\n","# Define custom colors\n","node_colors = []\n","for node in G.nodes():\n","    if labels[node].startswith('device'):\n","        node_colors.append('blue')\n","    elif labels[node] == 'self':\n","        node_colors.append('green')  # \"self\" 클라우드 노드를 초록색으로 표시\n","    else:\n","        node_colors.append('red')\n","\n","# 엣지 속성에서 연결 강도를 가져옴\n","edge_weights = [G[u][v]['weight'] for u, v in G.edges()]\n","\n","# 가중치를 시각적으로 더 명확하게 표현하기 위해 정규화\n","max_weight = max(edge_weights)\n","min_weight = min(edge_weights)\n","normalized_weights = [(w - min_weight) / (max_weight - min_weight) * 3 + 0.5 for w in edge_weights]\n","\n","# 노드 레이블 설정\n","node_labels = {node: labels[node] for node in G.nodes()}\n","\n","nx.draw(G, pos, labels=node_labels, with_labels=True, node_size=150, node_color=node_colors,\n","        font_size=10, font_color='black', edge_color='gray', width=normalized_weights)\n","\n","# 엣지 레이블 (가중치) 추가\n","edge_labels = nx.get_edge_attributes(G, 'weight')\n","edge_labels = {k: f'{v:.2f}' for k, v in edge_labels.items()}  # 소수점 둘째 자리까지 표시\n","nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels, font_size=8)\n","\n","plt.title('Device-Cloud Server Connection Graph (Edge weights: Avg Rating)')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":952},"id":"tFOPhL9xNSqE","executionInfo":{"status":"ok","timestamp":1721463101863,"user_tz":-540,"elapsed":2938,"user":{"displayName":"박준용","userId":"07115448813094959321"}},"outputId":"121e81d5-ae89-4cc6-d319-e728fd1d06fb"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["Combined Mapping: {('cloud', 'cloud2'): 0, ('cloud', 'cloud5'): 1, ('cloud', 'cloud4'): 2, ('cloud', 'cloud3'): 3, ('cloud', 'self'): 4, ('cloud', 'cloud1'): 5, ('device', 1): 6, ('device', 2): 7, ('device', 3): 8, ('device', 4): 9, ('device', 5): 10, ('device', 6): 11, ('device', 7): 12, ('device', 8): 13, ('device', 9): 14, ('device', 10): 15, ('device', 11): 16, ('device', 12): 17, ('device', 13): 18, ('device', 14): 19, ('device', 15): 20, ('device', 16): 21, ('device', 17): 22, ('device', 18): 23, ('device', 19): 24, ('device', 20): 25, ('device', 21): 26, ('device', 22): 27, ('device', 23): 28, ('device', 24): 29, ('device', 25): 30, ('device', 26): 31, ('device', 27): 32, ('device', 28): 33, ('device', 29): 34, ('device', 30): 35}\n","Train Edge Data :  torch.Size([2, 39312])\n","Val Edge Data : torch.Size([2, 4914])\n","Test Edge Data :  torch.Size([2, 4914])\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x800 with 1 Axes>"],"image/png":"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+qKqIvB37tzZdkyBXxoChX0RERGRBspgMBAbG8upU6fYsWOHs8updbd79N6bb75Jv379GD16NEOGDKFv375ER0fbrktJSWHy5Mk8//zzREZGMnbsWHbs2EGbNm1s1xgMBiZMmMDevXvtRvVvZLFU/FdTynfhLwIGANGUT9uvmKP/JOWP3ksBugEDMJnmMGZM1Ub2X3zxRaKionjppZcoKioiKiqKqKgodu7cabvmySefJCoqinfffZfDhw/brjl9626CTufv709iYiImk4mMjAwuXbp013tMJhPjx4+/JfDPmzdPgV9clsHaUOdtiYiIiAgApaWlpKWl0bNnT7tnlLu6t956yy7w//rXv8bDw6NW+jabISoKDh6kWpvs/eEP8MILNV9XfXPhwgVWrVpF165defDBB++6/4TZbGbRokUcPHjQdiwoKIjJkyfj5XWnvRNE6h+N7IuIiIg0cO7u7iQlJbF161aOHj3q7HJqhdVqtRvRdXNzq7WgD2AywapV0KwZuN3DltkGAyQkwG9+47ja6pOmTZsyceJECgsLWbhw4S2zNW5WMcLfqVMn27EzZ84wd+5cim99TIJIvaawLyIiIiJ4enoyYcIEPv74Y7755htnl+Nw165ds1vv7ePjU+s1hITA559D+/blIf5Og9IVXwhMmwbz5/93vf+rr75q9wjAG18jRoxw/IeoA4xGI/3796dv374sWrSIr7766o7Xm0wm4uLibgn88+bNU+AXl6Jp/CIiIiJic/HiRTIyMoiLi6NFixbOLsdhvvvuO/7+97/b3gcHB/PUU085pZYrV8oD/DvvlE/rN5n+G+bNZrBaITYWZs6EwYPtvxTIz88nPz+/0na9vLwICQmphU9Qd5SVlbF+/XquXbvGsGHDaNSo0W2vNZvNZGdnc+jQIdux4OBgHn/8cU3pF5egsC8iIiIids6ePcuiRYuYOHEiAQEBzi7HIfLy8khJSbG979ChA5MmTXJiReWh/rPPYPNmuHgR3N2hRQt47DEIDXVqafXOyZMn2bBhAwMGDKBdu3a3vU6BX1yZwr6IiIiI3OLrr79m5cqVTJo0CV9fX2eXU+MOHjzIggULbO+7d+/OuHHjnFiR1LTr16+zZs0aGjVqxODBg3G7zeYICvziqrRmX0RERERuERoayuDBg8nIyODatWvOLqfG3fy4tYrH7onraNSo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RETExSjsi4iIiIiIiLgYhX0RERERERERF6OwLyIiIiIiIuJiFPZFREREREREXIzCvoiIiIiIiIiLUdgXERERERERcTEK+yIiIiIiIiIuRmFfRERERERExMUo7IuIiIiIiIi4GIV9ERERERERERejsC8iIiIiIiLiYhT2RURERERERFyMwr6IiIiIiIiIi1HYFxEREREREXExCvsiIiIiIiIiLkZhX0RERERERMTFKOyLiIiIiIiIuBiFfREREREREREXo7AvIiIiIiIi4mIU9kVERERERERcjMK+iIiIiIiIiItR2BcRERERERFxMQr7IiIiIiIiIi5GYV9ERERERETExSjsi4iIiIiIiLgYhX0RERERERERF6OwLyIiIiIiIuJiFPZFREREREREXIzCvoiIiIiIiIiLUdgXERERERERcTEK+yIiIiIiIiIuRmFfRERERERExMUo7IuIiIiIiIi4GIV9ERERERERERejsC8iIiIiIiLiYhT2RURERERERFyMwr6IiIiIiIiIi1HYFxEREREREXExCvsiIiIiIiIiLkZhX0RERERERMTFKOyLiIiIiIiIuBiFfREREREREREXo7AvIiIiIiIi4mIU9kVERERERERcjMK+iIiIiIiIiItR2BcRERERERFxMQr7IiIiIiIiIi5GYV9ERERERETExSjsi4iIiIiIiLgYhX0RERERERERF6OwLyIiIiIiIuJiFPZFREREREREXIzCvoiIiIiIiIiLUdgXERERERERcTEK+yIiIiIiIiIuRmFfRERERERExMUo7IuIiIiIiIi4GIV9ERERERERERejsC8iIiIiIiLiYhT2RURERERERFyMwr6IiIiIiIiIi1HYFxEREREREXExCvsiIiIiIiIiLkZhX0RERERERMTF/H+nsweldVx95wAAAABJRU5ErkJggg==\n"},"metadata":{}}]},{"cell_type":"code","source":["# 클라우드 매핑과 디바이스 매핑을 저장할 딕셔너리 초기화\n","cloud_mapping = {}\n","device_mapping = {}\n","\n","# 매핑 데이터를 순회하며 분리\n","for key, value in combined_mapping.items():\n","    if key[0] == 'cloud':\n","        cloud_mapping[key] = value\n","    elif key[0] == 'device':\n","        device_mapping[key] = value"],"metadata":{"id":"04J1PXrl5vhF","executionInfo":{"status":"ok","timestamp":1721463368519,"user_tz":-540,"elapsed":499,"user":{"displayName":"박준용","userId":"07115448813094959321"}}},"execution_count":27,"outputs":[]},{"cell_type":"markdown","source":["##  모델 정의"],"metadata":{"id":"ZnPiHeH4NQbw"}},{"cell_type":"code","source":["import networkx as nx\n","import matplotlib.pyplot as plt\n","import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","from torch_sparse import SparseTensor\n","from torch_geometric.nn import GATConv\n","from sklearn.model_selection import train_test_split\n","import pandas as pd\n","import logging\n","\n","logging.basicConfig(level=logging.DEBUG)\n","logger = logging.getLogger(__name__)\n","\n","class NGCF_GAT_LSTM(nn.Module):\n","    def __init__(self, num_users, num_items, embedding_dim, heads, lstm_layers=1):\n","        super(NGCF_GAT_LSTM, self).__init__()\n","        self.user_embedding = nn.Embedding(num_users, embedding_dim)\n","        self.item_embedding = nn.Embedding(num_items, embedding_dim)\n","        self.reset_parameters()\n","\n","        self.gat_conv1 = GATConv(embedding_dim, embedding_dim, heads=heads)\n","        self.gat_conv2 = GATConv(embedding_dim * heads, embedding_dim, heads=1)\n","\n","        self.lstm = nn.LSTM(embedding_dim, embedding_dim, num_layers=lstm_layers, batch_first=True)\n","\n","    def reset_parameters(self):\n","        nn.init.xavier_uniform_(self.user_embedding.weight)\n","        nn.init.xavier_uniform_(self.item_embedding.weight)\n","\n","    def forward(self, edge_index, time_seq):\n","        x = torch.cat([self.user_embedding.weight, self.item_embedding.weight], dim=0)\n","        x = self.gat_conv1(x, edge_index)\n","        x = torch.relu(x)\n","        x = self.gat_conv2(x, edge_index)\n","        x = torch.relu(x)\n","\n","        x, _ = self.lstm(x.unsqueeze(1).repeat(1, time_seq.size(1), 1))\n","        x = x[:, -1, :]\n","\n","        user_embeddings, item_embeddings = x[:self.user_embedding.num_embeddings], x[self.user_embedding.num_embeddings:]\n","        return user_embeddings, item_embeddings\n","\n","def bpr_loss(user_embeddings, pos_item_embeddings, neg_item_embeddings):\n","    pos_scores = (user_embeddings * pos_item_embeddings).sum(dim=1)\n","    neg_scores = (user_embeddings * neg_item_embeddings).sum(dim=1)\n","    loss = -torch.log(torch.sigmoid(pos_scores - neg_scores)).mean()\n","    return loss\n","\n","def train(model, train_edge_index, num_users, optimizer, time_seq, epochs=100):\n","    model.train()\n","    for epoch in range(epochs):\n","        optimizer.zero_grad()\n","\n","        user_embeddings, item_embeddings = model(train_edge_index, time_seq)\n","\n","        user_indices = train_edge_index[0]\n","        pos_item_indices = train_edge_index[1] - num_users\n","\n","        neg_item_indices = torch.randint(0, item_embeddings.size(0), pos_item_indices.size(), dtype=torch.long)\n","\n","        pos_item_indices = torch.clamp(pos_item_indices, min=0, max=item_embeddings.size(0) - 1)\n","\n","        user_emb = user_embeddings[user_indices]\n","        pos_item_emb = item_embeddings[pos_item_indices]\n","        neg_item_emb = item_embeddings[neg_item_indices]\n","\n","        loss = bpr_loss(user_emb, pos_item_emb, neg_item_emb)\n","\n","        loss.backward()\n","        optimizer.step()\n","\n","        if (epoch + 1) % 10 == 0:\n","            print(f'Epoch {epoch + 1}, Loss: {loss.item()}')\n","\n","def evaluate(model, test_edge_index, num_users, time_seq):\n","    model.eval()\n","    with torch.no_grad():\n","        user_embeddings, item_embeddings = model(test_edge_index, time_seq)\n","        user_indices = test_edge_index[0]\n","        item_indices = test_edge_index[1] - num_users\n","\n","        scores = (user_embeddings[user_indices] * item_embeddings[torch.clamp(item_indices, min=0, max=item_embeddings.size(0) - 1)]).sum(dim=1)\n","    return scores\n","\n","def get_user_positive_items(edge_index, ratings, threshold=3):\n","    user_pos_items = {}\n","    for i in range(edge_index.shape[1]):\n","        user = edge_index[0, i].item()\n","        item = edge_index[1, i].item()\n","        rating = ratings[i].item()\n","        if rating >= threshold:\n","            if user in user_pos_items:\n","                if item not in user_pos_items[user]:\n","                    user_pos_items[user].append(item)\n","            else:\n","                user_pos_items[user] = [item]\n","    return user_pos_items\n","\n","def predict(model, device_id, TopK, network_data, device_mapping, cloud_mapping, edge_index, time_seq):\n","    print(f\"Starting prediction for device_id: {device_id}\")\n","\n","    df = pd.DataFrame(network_data, columns=['Timestamp', 'Hour', 'Device', 'Selected Entity', 'Bandwidth', 'Delay', 'Loss', 'Rating',\n","                                             'Device CPU', 'Device BW', 'Device Delay', 'Device Loss', 'Device Self Processing',\n","                                             'Cloud CPU Usage', 'Cloud BW', 'Cloud Latency', 'Network Activity'])\n","\n","    cloud_performance = df[df['Selected Entity'] != 'self'].groupby('Selected Entity').agg({\n","        'Bandwidth': 'mean',\n","        'Delay': 'mean',\n","        'Loss': 'mean',\n","        'Rating': 'mean',\n","        'Cloud CPU Usage': 'mean',\n","        'Cloud BW': 'mean',\n","        'Cloud Latency': 'mean'\n","    }).to_dict('index')\n","\n","    device_id_num = int(device_id.replace('device', ''))\n","    if device_id_num not in device_mapping.values():\n","        raise ValueError(f\"device_id {device_id} is not in device_mapping\")\n","    device = device_id_num - 1\n","\n","    with torch.no_grad():\n","        user_embeddings, item_embeddings = model(edge_index, time_seq)\n","        e_d = item_embeddings[device]\n","        scores = user_embeddings @ e_d\n","\n","    values, indices = torch.topk(scores, k=min(TopK, len(scores)))\n","\n","    recommended_clouds = []\n","    for index, value in zip(indices, values):\n","        cloud_id = f\"cloud{index.item() + 1}\"\n","        cloud_features = cloud_performance.get(cloud_id, {})\n","\n","        actual_performance = df[(df['Device'] == device_id) & (df['Selected Entity'] == cloud_id)].iloc[-1] if not df[(df['Device'] == device_id) & (df['Selected Entity'] == cloud_id)].empty else {}\n","\n","        recommended_clouds.append({\n","            'Cloud ID': cloud_id,\n","            'Cloud Features': cloud_features,\n","            'Predicted Score': value.item(),\n","            'Actual Performance': {\n","                'Bandwidth': actual_performance.get('Bandwidth', 'N/A'),\n","                'Delay': actual_performance.get('Delay', 'N/A'),\n","                'Loss': actual_performance.get('Loss', 'N/A'),\n","                'Rating': actual_performance.get('Rating', 'N/A')\n","            }\n","        })\n","\n","    return recommended_clouds"],"metadata":{"id":"eePlAFd6NSlM","executionInfo":{"status":"ok","timestamp":1721463370133,"user_tz":-540,"elapsed":549,"user":{"displayName":"박준용","userId":"07115448813094959321"}}},"execution_count":28,"outputs":[]},{"cell_type":"markdown","source":["## 모델 학습"],"metadata":{"id":"Ah3sfUanNX5c"}},{"cell_type":"code","source":["# 모델 학습 및 평가\n","embedding_dim = 512\n","heads = 8\n","lr = 0.002\n","epochs = 1000\n","\n","num_users = len(cloud_mapping)\n","num_items = len(device_mapping)\n","\n","# 시간 시퀀스 생성 (예: 10개의 time step)\n","time_seq = torch.arange(10).unsqueeze(0).repeat(num_users + num_items, 1)\n","\n","ngcf_gat_lstm_model = NGCF_GAT_LSTM(num_users, num_items, embedding_dim, heads)\n","optimizer_gat_lstm = optim.Adam(ngcf_gat_lstm_model.parameters(), lr=lr)\n","\n","train_edge_index = tet_edge_data[1]\n","train(ngcf_gat_lstm_model, train_edge_index, num_users, optimizer_gat_lstm, time_seq, epochs=epochs)\n","\n","test_edge_index = tet_edge_data[3]\n","ngcf_gat_lstm_scores = evaluate(ngcf_gat_lstm_model, test_edge_index, num_users, time_seq)\n","print(f'NGCF-GAT-LSTM Test Scores: {ngcf_gat_lstm_scores}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IkXEK0msNa91","executionInfo":{"status":"ok","timestamp":1721465823125,"user_tz":-540,"elapsed":1057492,"user":{"displayName":"박준용","userId":"07115448813094959321"}},"outputId":"8cb4cc85-3876-49da-cc44-465285c7cacf"},"execution_count":40,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 10, Loss: 0.5682217478752136\n","Epoch 20, Loss: 0.5356554388999939\n","Epoch 30, Loss: 0.5252029299736023\n","Epoch 40, Loss: 0.5232896208763123\n","Epoch 50, Loss: 0.5238093137741089\n","Epoch 60, Loss: 0.5193734765052795\n","Epoch 70, Loss: 0.5292618274688721\n","Epoch 80, Loss: 0.5251548886299133\n","Epoch 90, Loss: 0.522400438785553\n","Epoch 100, Loss: 0.5187279582023621\n","Epoch 110, Loss: 0.5153030157089233\n","Epoch 120, Loss: 0.5162059664726257\n","Epoch 130, Loss: 0.5174986124038696\n","Epoch 140, Loss: 0.514251708984375\n","Epoch 150, Loss: 0.5156288743019104\n","Epoch 160, Loss: 0.519000768661499\n","Epoch 170, Loss: 0.5156877040863037\n","Epoch 180, Loss: 0.5134183168411255\n","Epoch 190, Loss: 0.5131897330284119\n","Epoch 200, Loss: 0.5170698761940002\n","Epoch 210, Loss: 0.5155279040336609\n","Epoch 220, Loss: 0.5148261189460754\n","Epoch 230, Loss: 0.5131087303161621\n","Epoch 240, Loss: 0.5152354836463928\n","Epoch 250, Loss: 0.5130329728126526\n","Epoch 260, Loss: 0.51479572057724\n","Epoch 270, Loss: 0.5150823593139648\n","Epoch 280, Loss: 0.5105459690093994\n","Epoch 290, Loss: 0.51363605260849\n","Epoch 300, Loss: 0.5118044018745422\n","Epoch 310, Loss: 0.5128860473632812\n","Epoch 320, Loss: 0.5155014991760254\n","Epoch 330, Loss: 0.5133810043334961\n","Epoch 340, Loss: 0.5143349170684814\n","Epoch 350, Loss: 0.5133387446403503\n","Epoch 360, Loss: 0.5148512721061707\n","Epoch 370, Loss: 0.5137842297554016\n","Epoch 380, Loss: 0.5140304565429688\n","Epoch 390, Loss: 0.5116097331047058\n","Epoch 400, Loss: 0.5140659809112549\n","Epoch 410, Loss: 0.5125373005867004\n","Epoch 420, Loss: 0.513283371925354\n","Epoch 430, Loss: 0.5153005123138428\n","Epoch 440, Loss: 0.5161578059196472\n","Epoch 450, Loss: 0.5144615173339844\n","Epoch 460, Loss: 0.5126842856407166\n","Epoch 470, Loss: 0.5157138705253601\n","Epoch 480, Loss: 0.5125402212142944\n","Epoch 490, Loss: 0.5264628529548645\n","Epoch 500, Loss: 0.5159856081008911\n","Epoch 510, Loss: 0.5158474445343018\n","Epoch 520, Loss: 0.5154173374176025\n","Epoch 530, Loss: 0.5119922757148743\n","Epoch 540, Loss: 0.5135762691497803\n","Epoch 550, Loss: 0.5145816802978516\n","Epoch 560, Loss: 0.5137985944747925\n","Epoch 570, Loss: 0.5119425058364868\n","Epoch 580, Loss: 0.5127374529838562\n","Epoch 590, Loss: 0.5125943422317505\n","Epoch 600, Loss: 0.513451099395752\n","Epoch 610, Loss: 0.5138339400291443\n","Epoch 620, Loss: 0.5115039944648743\n","Epoch 630, Loss: 0.5115472674369812\n","Epoch 640, Loss: 0.5120770335197449\n","Epoch 650, Loss: 0.5146774649620056\n","Epoch 660, Loss: 0.5118138194084167\n","Epoch 670, Loss: 0.5119066834449768\n","Epoch 680, Loss: 0.512538492679596\n","Epoch 690, Loss: 0.5130288600921631\n","Epoch 700, Loss: 0.5151995420455933\n","Epoch 710, Loss: 0.5151811242103577\n","Epoch 720, Loss: 0.5147011876106262\n","Epoch 730, Loss: 0.5108481049537659\n","Epoch 740, Loss: 0.5125405788421631\n","Epoch 750, Loss: 0.51326984167099\n","Epoch 760, Loss: 0.5108852982521057\n","Epoch 770, Loss: 0.5141120553016663\n","Epoch 780, Loss: 0.514579713344574\n","Epoch 790, Loss: 0.5130079388618469\n","Epoch 800, Loss: 0.5125396251678467\n","Epoch 810, Loss: 0.5105376243591309\n","Epoch 820, Loss: 0.5128052234649658\n","Epoch 830, Loss: 0.5125347971916199\n","Epoch 840, Loss: 0.5152073502540588\n","Epoch 850, Loss: 0.5143120884895325\n","Epoch 860, Loss: 0.512876570224762\n","Epoch 870, Loss: 0.5116561055183411\n","Epoch 880, Loss: 0.5126615762710571\n","Epoch 890, Loss: 0.5153055191040039\n","Epoch 900, Loss: 0.5124143362045288\n","Epoch 910, Loss: 0.5129695534706116\n","Epoch 920, Loss: 0.5133908987045288\n","Epoch 930, Loss: 0.5111775994300842\n","Epoch 940, Loss: 0.5104081630706787\n","Epoch 950, Loss: 0.5117519497871399\n","Epoch 960, Loss: 0.5132240056991577\n","Epoch 970, Loss: 0.5124137997627258\n","Epoch 980, Loss: 0.5133714079856873\n","Epoch 990, Loss: 0.5155324935913086\n","Epoch 1000, Loss: 0.5129044055938721\n","NGCF-GAT-LSTM Test Scores: tensor([1.3134, 9.4657, 1.6060,  ..., 1.9483, 1.5132, 8.3151])\n"]}]},{"cell_type":"markdown","source":["## 모델 예측"],"metadata":{"id":"KU21s-y2Nbj1"}},{"cell_type":"code","source":["# 예측 예시\n","device_id = 'device16'\n","TopK = 5\n","\n","recommended_clouds = predict(ngcf_gat_lstm_model, device_id, TopK, augmented_data, device_mapping, cloud_mapping, test_edge_index, time_seq)\n","for rec in recommended_clouds:\n","    print(f\"Cloud ID: {rec['Cloud ID']}\")\n","    print(f\"Cloud Features: {rec['Cloud Features']}\")\n","    print(f\"Predicted Score: {rec['Predicted Score']}\")\n","    print(f\"Actual Performance: {rec['Actual Performance']}\")\n","    print(\"---\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yPig0pUVPAzV","executionInfo":{"status":"ok","timestamp":1721466444612,"user_tz":-540,"elapsed":1098,"user":{"displayName":"박준용","userId":"07115448813094959321"}},"outputId":"ad6c1ec7-af99-4a69-f13c-7f2ce7c751e8"},"execution_count":42,"outputs":[{"output_type":"stream","name":"stdout","text":["Starting prediction for device_id: device16\n","Cloud ID: cloud3\n","Cloud Features: {'Bandwidth': 0.0, 'Delay': 0.5031774454100537, 'Loss': 0.009024265931103819, 'Rating': 1.6143202453987728, 'Cloud CPU Usage': 0.6566431203213645, 'Cloud BW': 0.5852144410896731, 'Cloud Latency': 0.6678871700768194}\n","Predicted Score: 10.24142074584961\n","Actual Performance: {'Bandwidth': 0.0, 'Delay': 0.37724103798501707, 'Loss': 0.0, 'Rating': 2.03}\n","---\n","Cloud ID: cloud4\n","Cloud Features: {'Bandwidth': 0.0, 'Delay': 0.5825406939904582, 'Loss': 0.003920819061930878, 'Rating': 1.3555875555555557, 'Cloud CPU Usage': 0.5386080291824433, 'Cloud BW': 0.6117958216107163, 'Cloud Latency': 0.6438986711009288}\n","Predicted Score: 9.341002464294434\n","Actual Performance: {'Bandwidth': 0.0, 'Delay': 0.4835218963241247, 'Loss': 0.0, 'Rating': 1.72}\n","---\n","Cloud ID: cloud2\n","Cloud Features: {'Bandwidth': 0.0, 'Delay': 0.4623918496902817, 'Loss': 0.008594489652147267, 'Rating': 1.749694259818731, 'Cloud CPU Usage': 0.7616791598313625, 'Cloud BW': 0.895142334510419, 'Cloud Latency': 0.5889151908897067}\n","Predicted Score: 8.883296012878418\n","Actual Performance: {'Bandwidth': 0.0, 'Delay': 0.2783791611795504, 'Loss': 0.0, 'Rating': 2.33}\n","---\n","Cloud ID: cloud6\n","Cloud Features: {}\n","Predicted Score: 8.689221382141113\n","Actual Performance: {'Bandwidth': 'N/A', 'Delay': 'N/A', 'Loss': 'N/A', 'Rating': 'N/A'}\n","---\n","Cloud ID: cloud1\n","Cloud Features: {'Bandwidth': 0.0, 'Delay': 0.7098467914074651, 'Loss': 0.0015531495574716283, 'Rating': 0.9351847133757962, 'Cloud CPU Usage': 0.49558829755524736, 'Cloud BW': 0.7309900687109004, 'Cloud Latency': 0.6226899126036315}\n","Predicted Score: 1.6447550058364868\n","Actual Performance: {'Bandwidth': 0.0, 'Delay': 0.6289988707405705, 'Loss': 0.0, 'Rating': 1.26}\n","---\n"]}]},{"cell_type":"code","source":["import networkx as nx\n","import matplotlib.pyplot as plt\n","import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","from torch_sparse import SparseTensor\n","from torch_geometric.nn import GATConv\n","from sklearn.model_selection import train_test_split\n","import pandas as pd\n","import logging\n","\n","logging.basicConfig(level=logging.DEBUG)\n","logger = logging.getLogger(__name__)\n","\n","class NGCF_GAT_LSTM(nn.Module):\n","    def __init__(self, num_users, num_items, embedding_dim, heads, lstm_layers=1):\n","        super(NGCF_GAT_LSTM, self).__init__()\n","        self.user_embedding = nn.Embedding(num_users, embedding_dim)\n","        self.item_embedding = nn.Embedding(num_items, embedding_dim)\n","        self.reset_parameters()\n","\n","        self.gat_conv1 = GATConv(embedding_dim, embedding_dim, heads=heads, edge_dim=1)\n","        self.gat_conv2 = GATConv(embedding_dim * heads, embedding_dim, heads=1, edge_dim=1)\n","\n","        self.lstm = nn.LSTM(embedding_dim, embedding_dim, num_layers=lstm_layers, batch_first=True)\n","\n","    def reset_parameters(self):\n","        nn.init.xavier_uniform_(self.user_embedding.weight)\n","        nn.init.xavier_uniform_(self.item_embedding.weight)\n","\n","    def forward(self, edge_index, edge_weight, time_seq):\n","        x = torch.cat([self.user_embedding.weight, self.item_embedding.weight], dim=0)\n","        x = self.gat_conv1(x, edge_index, edge_attr=edge_weight)\n","        x = torch.relu(x)\n","        x = self.gat_conv2(x, edge_index, edge_attr=edge_weight)\n","        x = torch.relu(x)\n","\n","        x, _ = self.lstm(x.unsqueeze(1).repeat(1, time_seq.size(1), 1))\n","        x = x[:, -1, :]\n","\n","        user_embeddings, item_embeddings = x[:self.user_embedding.num_embeddings], x[self.user_embedding.num_embeddings:]\n","        return user_embeddings, item_embeddings\n","\n","def weighted_bpr_loss(user_embeddings, pos_item_embeddings, neg_item_embeddings, weights):\n","    pos_scores = (user_embeddings * pos_item_embeddings).sum(dim=1)\n","    neg_scores = (user_embeddings * neg_item_embeddings).sum(dim=1)\n","    loss = -weights * torch.log(torch.sigmoid(pos_scores - neg_scores))\n","    return loss.mean()\n","\n","def train(model, train_edge_index, edge_weights, num_users, optimizer, time_seq, epochs=100):\n","    model.train()\n","    for epoch in range(epochs):\n","        optimizer.zero_grad()\n","\n","        user_embeddings, item_embeddings = model(train_edge_index, edge_weights, time_seq)\n","\n","        user_indices = train_edge_index[0]\n","        pos_item_indices = train_edge_index[1] - num_users\n","\n","        neg_item_indices = torch.randint(0, item_embeddings.size(0), pos_item_indices.size(), dtype=torch.long)\n","\n","        pos_item_indices = torch.clamp(pos_item_indices, min=0, max=item_embeddings.size(0) - 1)\n","\n","        user_emb = user_embeddings[user_indices]\n","        pos_item_emb = item_embeddings[pos_item_indices]\n","        neg_item_emb = item_embeddings[neg_item_indices]\n","\n","        loss = weighted_bpr_loss(user_emb, pos_item_emb, neg_item_emb, edge_weights)\n","\n","        loss.backward()\n","        optimizer.step()\n","\n","        if (epoch + 1) % 10 == 0:\n","            print(f'Epoch {epoch + 1}, Loss: {loss.item()}')\n","\n","def evaluate(model, test_edge_index, edge_weights, num_users, time_seq):\n","    model.eval()\n","    with torch.no_grad():\n","        user_embeddings, item_embeddings = model(test_edge_index, edge_weights, time_seq)\n","        user_indices = test_edge_index[0]\n","        item_indices = test_edge_index[1] - num_users\n","\n","        scores = (user_embeddings[user_indices] * item_embeddings[torch.clamp(item_indices, min=0, max=item_embeddings.size(0) - 1)]).sum(dim=1)\n","    return scores\n","\n","def get_user_positive_items(edge_index, ratings, threshold=3):\n","    user_pos_items = {}\n","    for i in range(edge_index.shape[1]):\n","        user = edge_index[0, i].item()\n","        item = edge_index[1, i].item()\n","        rating = ratings[i].item()\n","        if rating >= threshold:\n","            if user in user_pos_items:\n","                if item not in user_pos_items[user]:\n","                    user_pos_items[user].append(item)\n","            else:\n","                user_pos_items[user] = [item]\n","    return user_pos_items\n","\n","def predict(model, device_id, TopK, network_data, device_mapping, cloud_mapping, edge_index, edge_weights, time_seq):\n","    print(f\"Starting prediction for device_id: {device_id}\")\n","\n","    df = pd.DataFrame(network_data, columns=['Timestamp', 'Hour', 'Device', 'Selected Entity', 'Bandwidth', 'Delay', 'Loss', 'Rating',\n","                                             'Device CPU', 'Device BW', 'Device Delay', 'Device Loss', 'Device Self Processing',\n","                                             'Cloud CPU Usage', 'Cloud BW', 'Cloud Latency', 'Network Activity'])\n","\n","    cloud_performance = df[df['Selected Entity'] != 'self'].groupby('Selected Entity').agg({\n","        'Bandwidth': 'mean',\n","        'Delay': 'mean',\n","        'Loss': 'mean',\n","        'Rating': 'mean',\n","        'Cloud CPU Usage': 'mean',\n","        'Cloud BW': 'mean',\n","        'Cloud Latency': 'mean'\n","    }).to_dict('index')\n","\n","    device_id_num = int(device_id.replace('device', ''))\n","    if device_id_num not in device_mapping.values():\n","        raise ValueError(f\"device_id {device_id} is not in device_mapping\")\n","    device = device_id_num - 1\n","\n","    with torch.no_grad():\n","        user_embeddings, item_embeddings = model(edge_index, edge_weights, time_seq)\n","        e_d = item_embeddings[device]\n","        scores = user_embeddings @ e_d\n","\n","    values, indices = torch.topk(scores, k=min(TopK, len(scores)))\n","\n","    recommended_clouds = []\n","    for index, value in zip(indices, values):\n","        cloud_id = f\"cloud{index.item() + 1}\"\n","        cloud_features = cloud_performance.get(cloud_id, {})\n","\n","        actual_performance = df[(df['Device'] == device_id) & (df['Selected Entity'] == cloud_id)].iloc[-1] if not df[(df['Device'] == device_id) & (df['Selected Entity'] == cloud_id)].empty else {}\n","\n","        recommended_clouds.append({\n","            'Cloud ID': cloud_id,\n","            'Cloud Features': cloud_features,\n","            'Predicted Score': value.item(),\n","            'Actual Performance': {\n","                'Bandwidth': actual_performance.get('Bandwidth', 'N/A'),\n","                'Delay': actual_performance.get('Delay', 'N/A'),\n","                'Loss': actual_performance.get('Loss', 'N/A'),\n","                'Rating': actual_performance.get('Rating', 'N/A')\n","            }\n","        })\n","\n","    return recommended_clouds\n","\n","# 엣지 가중치 추출\n","edge_weights = torch.tensor([G[u][v]['weight'] for u, v in G.edges()]).float().view(-1, 1)\n","\n","# 모델 학습 및 평가\n","embedding_dim = 512\n","heads = 4\n","lr = 0.001\n","epochs = 1000\n","\n","num_users = len(cloud_mapping)\n","num_items = len(device_mapping)\n","\n","# 시간 시퀀스 생성 (예: 10개의 time step)\n","time_seq = torch.arange(10).unsqueeze(0).repeat(num_users + num_items, 1)\n","\n","ngcf_gat_lstm_model = NGCF_GAT_LSTM(num_users, num_items, embedding_dim, heads)\n","optimizer_gat_lstm = optim.Adam(ngcf_gat_lstm_model.parameters(), lr=lr)\n","\n","train_edge_index = tet_edge_data[1]\n","train_edge_weights = edge_weights[torch.randperm(edge_weights.size(0))[:train_edge_index.size(1)]]\n","train(ngcf_gat_lstm_model, train_edge_index, train_edge_weights, num_users, optimizer_gat_lstm, time_seq, epochs=epochs)\n","\n","test_edge_index = tet_edge_data[3]\n","test_edge_weights = edge_weights[torch.randperm(edge_weights.size(0))[:test_edge_index.size(1)]]\n","ngcf_gat_lstm_scores = evaluate(ngcf_gat_lstm_model, test_edge_index, test_edge_weights, num_users, time_seq)\n","print(f'NGCF-GAT-LSTM Test Scores: {ngcf_gat_lstm_scores}')\n","\n","# 예측 예시\n","device_id = 'device12'\n","TopK = 1\n","\n","recommended_clouds = predict(ngcf_gat_lstm_model, device_id, TopK, augmented_data, device_mapping, cloud_mapping, test_edge_index, test_edge_weights, time_seq)\n","for rec in recommended_clouds:\n","    print(f\"Cloud ID: {rec['Cloud ID']}\")\n","    print(f\"Cloud Features: {rec['Cloud Features']}\")\n","    print(f\"Predicted Score: {rec['Predicted Score']}\")\n","    print(f\"Actual Performance: {rec['Actual Performance']}\")\n","    print(\"---\")"],"metadata":{"id":"G3ZMl0HtTo3D"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### 4. 모델 정의(NGCF)"],"metadata":{"id":"qWmwz-9a4s8m"}},{"cell_type":"code","source":["import networkx as nx\n","import matplotlib.pyplot as plt\n","import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","from torch_sparse import SparseTensor\n","from torch_geometric.nn import GATConv, GCNConv\n","from sklearn.model_selection import train_test_split\n","import pandas as pd\n","import os\n","import logging\n","\n","logging.basicConfig(level=logging.DEBUG)\n","logger = logging.getLogger(__name__)\n","\n","# NGCF-GAT 모델 정의\n","class NGCF_GAT(nn.Module):\n","    def __init__(self, num_users, num_items, embedding_dim, heads):\n","        super(NGCF_GAT, self).__init__()\n","        self.user_embedding = nn.Embedding(num_users, embedding_dim)\n","        self.item_embedding = nn.Embedding(num_items, embedding_dim)\n","        self.reset_parameters()\n","\n","        self.gat_conv1 = GATConv(embedding_dim, embedding_dim, heads=heads)\n","        self.gat_conv2 = GATConv(embedding_dim * heads, embedding_dim, heads=1)\n","\n","    def reset_parameters(self):\n","        nn.init.xavier_uniform_(self.user_embedding.weight)\n","        nn.init.xavier_uniform_(self.item_embedding.weight)\n","\n","    def forward(self, edge_index):\n","        x = torch.cat([self.user_embedding.weight, self.item_embedding.weight], dim=0)\n","        x = self.gat_conv1(x, edge_index)\n","        x = torch.relu(x)\n","        x = self.gat_conv2(x, edge_index)\n","        x = torch.relu(x)\n","        user_embeddings, item_embeddings = x[:self.user_embedding.num_embeddings], x[self.user_embedding.num_embeddings:]\n","        return user_embeddings, item_embeddings\n","\n","# BPR 손실 함수 정의\n","def bpr_loss(user_embeddings, pos_item_embeddings, neg_item_embeddings):\n","    pos_scores = (user_embeddings * pos_item_embeddings).sum(dim=1)\n","    neg_scores = (user_embeddings * neg_item_embeddings).sum(dim=1)\n","    loss = -torch.log(torch.sigmoid(pos_scores - neg_scores)).mean()\n","    return loss\n","\n","# 모델 학습\n","def train(model, train_edge_index, num_users, optimizer, epochs=100):\n","    model.train()\n","    for epoch in range(epochs):\n","        optimizer.zero_grad()\n","\n","        user_embeddings, item_embeddings = model(train_edge_index)\n","\n","        user_indices = train_edge_index[0]\n","        pos_item_indices = train_edge_index[1] - num_users\n","\n","        neg_item_indices = torch.randint(0, item_embeddings.size(0), pos_item_indices.size(), dtype=torch.long)\n","\n","        pos_item_indices = torch.clamp(pos_item_indices, min=0, max=item_embeddings.size(0) - 1)\n","\n","        user_emb = user_embeddings[user_indices]\n","        pos_item_emb = item_embeddings[pos_item_indices]\n","        neg_item_emb = item_embeddings[neg_item_indices]\n","\n","        loss = bpr_loss(user_emb, pos_item_emb, neg_item_emb)\n","\n","        loss.backward()\n","        optimizer.step()\n","\n","        if (epoch + 1) % 10 == 0:\n","            print(f'Epoch {epoch + 1}, Loss: {loss.item()}')\n","\n","# 모델 평가\n","def evaluate(model, test_edge_index, num_users):\n","    model.eval()\n","    with torch.no_grad():\n","        user_embeddings, item_embeddings = model(test_edge_index)\n","        user_indices = test_edge_index[0]\n","        item_indices = test_edge_index[1] - num_users\n","\n","        scores = (user_embeddings[user_indices] * item_embeddings[torch.clamp(item_indices, min=0, max=item_embeddings.size(0) - 1)]).sum(dim=1)\n","    return scores\n","\n","def get_user_positive_items(edge_index, ratings, threshold=3):\n","    user_pos_items = {}\n","    for i in range(edge_index.shape[1]):\n","        user = edge_index[0, i].item()\n","        item = edge_index[1, i].item()\n","        rating = ratings[i].item()\n","        if rating >= threshold:\n","            if user in user_pos_items:\n","                if item not in user_pos_items[user]:\n","                    user_pos_items[user].append(item)\n","            else:\n","                user_pos_items[user] = [item]\n","    return user_pos_items\n","\n","def predict(model, device_id, TopK, network_data, device_mapping, cloud_mapping, edge_index):\n","    print(f\"Starting prediction for device_id: {device_id}\")\n","\n","    # 네트워크 데이터 로드 및 전처리\n","    df = pd.DataFrame(network_data, columns=['Timestamp', 'Hour', 'Device', 'Selected Entity', 'Bandwidth', 'Delay', 'Loss', 'Rating',\n","                                             'Device CPU', 'Device BW', 'Device Delay', 'Device Loss', 'Device Self Processing',\n","                                             'Cloud CPU Usage', 'Cloud BW', 'Cloud Latency', 'Network Activity'])\n","\n","    # 클라우드 성능 데이터 준비\n","    cloud_performance = df[df['Selected Entity'] != 'self'].groupby('Selected Entity').agg({\n","        'Bandwidth': 'mean',\n","        'Delay': 'mean',\n","        'Loss': 'mean',\n","        'Rating': 'mean',\n","        'Cloud CPU Usage': 'mean',\n","        'Cloud BW': 'mean',\n","        'Cloud Latency': 'mean'\n","    }).to_dict('index')\n","\n","    # 디바이스 ID 확인 및 매핑\n","    device_id_num = int(device_id.replace('device', ''))\n","    if device_id_num not in device_mapping.values():\n","        raise ValueError(f\"device_id {device_id} is not in device_mapping\")\n","    device = device_id_num - 1  # device_mapping이 0부터 시작한다고 가정\n","\n","    # 모델을 사용하여 예측\n","    with torch.no_grad():\n","        user_embeddings, item_embeddings = model(edge_index)\n","        e_d = item_embeddings[device]\n","        scores = user_embeddings @ e_d\n","\n","    # Top-K 클라우드 선택\n","    values, indices = torch.topk(scores, k=min(TopK, len(scores)))\n","\n","    # 추천 목록 생성\n","    recommended_clouds = []\n","    for index, value in zip(indices, values):\n","        cloud_id = f\"cloud{index.item() + 1}\"  # cloud_mapping이 0부터 시작한다고 가정\n","        cloud_features = cloud_performance.get(cloud_id, {})\n","\n","        # 해당 디바이스와 클라우드 간의 실제 성능 데이터 추출\n","        actual_performance = df[(df['Device'] == device_id) & (df['Selected Entity'] == cloud_id)].iloc[-1] if not df[(df['Device'] == device_id) & (df['Selected Entity'] == cloud_id)].empty else {}\n","\n","        recommended_clouds.append({\n","            'Cloud ID': cloud_id,\n","            'Cloud Features': cloud_features,\n","            'Predicted Score': value.item(),\n","            'Actual Performance': {\n","                'Bandwidth': actual_performance.get('Bandwidth', 'N/A'),\n","                'Delay': actual_performance.get('Delay', 'N/A'),\n","                'Loss': actual_performance.get('Loss', 'N/A'),\n","                'Rating': actual_performance.get('Rating', 'N/A')\n","            }\n","        })\n","\n","    return recommended_clouds"],"metadata":{"id":"39C93uouoim-"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### 5. 모델 학습 및 평가"],"metadata":{"id":"dvxxo-Lj51Jp"}},{"cell_type":"markdown","source":["#### 설정\n","- 임베딩 차원 : 64\n","- 헤드 : 2\n","- 학습률 : 0.001\n","- epoches = 1000"],"metadata":{"id":"t_AIW7xu53yl"}},{"cell_type":"code","source":["#-- NGCF-GAT 모델 학습 및 평가\n","embedding_dim = 32\n","heads = 2\n","lr = 0.001\n","epochs = 1000\n","\n","num_users = len(cloud_mapping)\n","num_items = len(device_mapping)\n","\n","ngcf_gat_model = NGCF_GAT(num_users, num_items, embedding_dim, heads)\n","optimizer_gat = optim.Adam(ngcf_gat_model.parameters(), lr=lr)\n","\n","train_edge_index = tet_edge_data[1]\n","train(ngcf_gat_model, train_edge_index, num_users, optimizer_gat, epochs=epochs)\n","\n","test_edge_index = tet_edge_data[3]\n","ngcf_gat_scores = evaluate(ngcf_gat_model, test_edge_index, num_users)\n","print(f'NGCF-GAT Test Scores: {ngcf_gat_scores}')\n","\n","# #-- NGCF 모델 학습 및 평가\n","# ngcf_model = NGCF(num_users, num_items, embedding_dim)\n","# optimizer_ngcf = optim.Adam(ngcf_model.parameters(), lr=lr)\n","\n","# train(ngcf_model, train_edge_index, num_users, optimizer_ngcf, epochs=epochs)\n","\n","# ngcf_scores = evaluate(ngcf_model, test_edge_index, num_users)\n","# print(f'NGCF Test Scores: {ngcf_scores}')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"id":"gEwtwQxT52u7","executionInfo":{"status":"ok","timestamp":1720708355319,"user_tz":-540,"elapsed":7219,"user":{"displayName":"박준용","userId":"07115448813094959321"}},"outputId":"58429d08-0d29-40e4-b5fd-6bc90a4cfff8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 10, Loss: 0.5937466025352478\n","Epoch 20, Loss: 0.5132811665534973\n","Epoch 30, Loss: 0.4921095073223114\n","Epoch 40, Loss: 0.4710497558116913\n","Epoch 50, Loss: 0.4779999256134033\n","Epoch 60, Loss: 0.4779089689254761\n","Epoch 70, Loss: 0.44953256845474243\n","Epoch 80, Loss: 0.46144384145736694\n","Epoch 90, Loss: 0.45176374912261963\n","Epoch 100, Loss: 0.4428750276565552\n","Epoch 110, Loss: 0.4330812096595764\n","Epoch 120, Loss: 0.4478076100349426\n","Epoch 130, Loss: 0.4288175702095032\n","Epoch 140, Loss: 0.4222120940685272\n","Epoch 150, Loss: 0.4408925473690033\n","Epoch 160, Loss: 0.43029141426086426\n","Epoch 170, Loss: 0.44646427035331726\n","Epoch 180, Loss: 0.42403334379196167\n","Epoch 190, Loss: 0.4286714196205139\n","Epoch 200, Loss: 0.4350135028362274\n","Epoch 210, Loss: 0.4397945702075958\n","Epoch 220, Loss: 0.4103953540325165\n","Epoch 230, Loss: 0.4231473207473755\n","Epoch 240, Loss: 0.42204225063323975\n","Epoch 250, Loss: 0.4332771301269531\n","Epoch 260, Loss: 0.42814475297927856\n","Epoch 270, Loss: 0.4458959698677063\n","Epoch 280, Loss: 0.4333946108818054\n","Epoch 290, Loss: 0.4189523160457611\n","Epoch 300, Loss: 0.41863223910331726\n","Epoch 310, Loss: 0.41345083713531494\n","Epoch 320, Loss: 0.4236880838871002\n","Epoch 330, Loss: 0.43208587169647217\n","Epoch 340, Loss: 0.43807822465896606\n","Epoch 350, Loss: 0.4469139873981476\n","Epoch 360, Loss: 0.4080297648906708\n","Epoch 370, Loss: 0.4183768928050995\n","Epoch 380, Loss: 0.4223696291446686\n","Epoch 390, Loss: 0.4171522855758667\n","Epoch 400, Loss: 0.43198293447494507\n","Epoch 410, Loss: 0.42686134576797485\n","Epoch 420, Loss: 0.42949965596199036\n","Epoch 430, Loss: 0.4189480245113373\n","Epoch 440, Loss: 0.4207587242126465\n","Epoch 450, Loss: 0.4340001344680786\n","Epoch 460, Loss: 0.438585489988327\n","Epoch 470, Loss: 0.42649441957473755\n","Epoch 480, Loss: 0.41630083322525024\n","Epoch 490, Loss: 0.42616263031959534\n","Epoch 500, Loss: 0.4149996042251587\n","Epoch 510, Loss: 0.4394231140613556\n","Epoch 520, Loss: 0.42962825298309326\n","Epoch 530, Loss: 0.4202520549297333\n","Epoch 540, Loss: 0.41547173261642456\n","Epoch 550, Loss: 0.43317484855651855\n","Epoch 560, Loss: 0.4453587830066681\n","Epoch 570, Loss: 0.421950101852417\n","Epoch 580, Loss: 0.4204663038253784\n","Epoch 590, Loss: 0.4028474688529968\n","Epoch 600, Loss: 0.41340917348861694\n","Epoch 610, Loss: 0.42216789722442627\n","Epoch 620, Loss: 0.4262380003929138\n","Epoch 630, Loss: 0.4214287996292114\n","Epoch 640, Loss: 0.4266427755355835\n","Epoch 650, Loss: 0.4293627440929413\n","Epoch 660, Loss: 0.4185367524623871\n","Epoch 670, Loss: 0.44572100043296814\n","Epoch 680, Loss: 0.4275144934654236\n","Epoch 690, Loss: 0.41736841201782227\n","Epoch 700, Loss: 0.4260111153125763\n","Epoch 710, Loss: 0.41935601830482483\n","Epoch 720, Loss: 0.4244972765445709\n","Epoch 730, Loss: 0.42722803354263306\n","Epoch 740, Loss: 0.43236279487609863\n","Epoch 750, Loss: 0.43665754795074463\n","Epoch 760, Loss: 0.41509348154067993\n","Epoch 770, Loss: 0.4314205050468445\n","Epoch 780, Loss: 0.4303305447101593\n","Epoch 790, Loss: 0.4149824380874634\n","Epoch 800, Loss: 0.4265889525413513\n","Epoch 810, Loss: 0.42979171872138977\n","Epoch 820, Loss: 0.4216163754463196\n","Epoch 830, Loss: 0.42739138007164\n","Epoch 840, Loss: 0.42446398735046387\n","Epoch 850, Loss: 0.4372902810573578\n","Epoch 860, Loss: 0.426874041557312\n","Epoch 870, Loss: 0.43497434258461\n","Epoch 880, Loss: 0.4125607907772064\n","Epoch 890, Loss: 0.4179447591304779\n","Epoch 900, Loss: 0.43828967213630676\n","Epoch 910, Loss: 0.4281807243824005\n","Epoch 920, Loss: 0.43228402733802795\n","Epoch 930, Loss: 0.4155450463294983\n","Epoch 940, Loss: 0.4207671284675598\n","Epoch 950, Loss: 0.4218607246875763\n","Epoch 960, Loss: 0.4289529025554657\n","Epoch 970, Loss: 0.4185009300708771\n","Epoch 980, Loss: 0.4212823510169983\n","Epoch 990, Loss: 0.42672425508499146\n","Epoch 1000, Loss: 0.4168204069137573\n","NGCF-GAT Test Scores: tensor([18.6201, 10.7592, 19.8750, 18.4976, 14.3709, 10.4703, 18.6201, 11.2293,\n","        17.1006, 10.7592, 15.2583, 14.3709, 11.0409, 11.0657, 10.4703, 11.0641,\n","        20.7243, 22.0010, 11.0628,  9.2046, 11.0657, 15.7880, 11.0657, 17.6939,\n","        18.4976, 11.0653, 11.0653, 11.0603, 22.2788,  8.8450, 11.0628, 12.7819,\n","        11.0603, 20.3818, 10.7592, 19.7059, 11.2293, 11.2293, 13.1429, 10.7592,\n","        11.0628, 10.7592, 11.0641,  8.8450, 16.5148, 11.0653, 22.0010, 11.0628,\n","        11.0628, 11.0657, 11.9514, 15.6472, 11.0628, 13.3299, 11.0653, 11.0657,\n","        11.0603, 10.7592, 14.7137, 14.3709, 11.0653, 11.0657, 19.8750, 11.2293,\n","        11.2293,  9.2046, 13.3299, 17.6078, 11.0409, 19.5407, 11.0653, 11.0657,\n","        11.0653, 11.0641, 10.4703, 11.2293, 11.0653, 11.0628, 20.1691, 17.6078,\n","        11.0641, 19.4582, 22.0010, 21.4854, 13.1429,  8.8450, 19.7059, 17.6078,\n","        10.7592, 10.7592, 11.0628, 11.0603, 22.2788,  8.8450, 10.7592, 19.7059,\n","        22.2788, 11.0603, 12.7819, 20.3087, 10.7592, 13.5492, 19.7059, 13.1429,\n","        11.2293, 11.0653, 11.0409,  9.2046, 17.3109, 22.0010, 11.0641, 21.4854,\n","        11.0641, 11.0628, 11.0603, 13.1429, 11.0409, 11.0657, 14.3709, 12.7819,\n","        11.0409, 13.1429, 10.4703, 18.4976, 20.7243, 11.0657, 13.5492, 11.0653,\n","         9.2046, 22.2788, 11.0653, 13.3299, 10.7592, 19.3730, 11.0641, 10.4703,\n","        11.0409, 10.7592, 11.0628,  9.2046, 11.0641, 10.7592, 20.3087, 19.4582,\n","        22.0010, 10.7592, 17.6078, 10.7592, 11.0657, 11.0657, 11.0628, 10.7592,\n","        11.0641, 10.7592, 11.0657, 11.2293, 10.7592, 13.5492,  8.7524, 11.0409,\n","        11.0657, 11.0409, 11.2293, 12.7819, 15.7880, 20.7243, 17.4773, 10.7592,\n","        13.3299, 11.0603, 18.4976, 11.0409, 11.0603, 17.3109, 11.0653, 11.0409,\n","        11.0409, 11.0603, 11.0603, 11.0409])\n"]}]},{"cell_type":"markdown","source":["### 6. 예측"],"metadata":{"id":"QcL5PqHN6Nk8"}},{"cell_type":"code","source":["from ast import arguments\n","# 예측 예시\n","device_id = 'device8'  # 예시 사용자 ID\n","TopK = 1  # 상위 5개 추천\n","\n","recommended_clouds = predict(ngcf_gat_model, device_id, TopK, augmented_data, device_mapping, cloud_mapping, test_edge_index)\n","for rec in recommended_clouds:\n","    print(f\"Cloud ID: {rec['Cloud ID']}\")\n","    print(f\"Cloud Features: {rec['Cloud Features']}\")\n","    print(f\"Predicted Score: {rec['Predicted Score']}\")\n","    print(f\"Actual Performance: {rec['Actual Performance']}\")\n","    print(\"---\")"],"metadata":{"id":"yPd7nbxYSGcb","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1720708403708,"user_tz":-540,"elapsed":533,"user":{"displayName":"박준용","userId":"07115448813094959321"}},"outputId":"73546c6c-6c10-4697-ab0a-9f08544f0530"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Starting prediction for device_id: device8\n","Cloud ID: cloud6\n","Cloud Features: {}\n","Predicted Score: 22.278844833374023\n","Actual Performance: {'Bandwidth': 'N/A', 'Delay': 'N/A', 'Loss': 'N/A', 'Rating': 'N/A'}\n","---\n"]}]},{"cell_type":"markdown","source":[],"metadata":{"id":"f1kzvcnNsU4e"}},{"cell_type":"markdown","source":["### 7. 평가"],"metadata":{"id":"5sWLvXn5SKbI"}},{"cell_type":"code","source":["# 평가\n","ngcf_gat_model.eval()\n","device_choices = {}\n","with torch.no_grad():\n","    for device_name, device_idx in device_mapping.items():\n","        device_probs = []\n","        for cloud_name, cloud_idx in cloud_mapping.items():\n","            prob = torch.sigmoid(ngcf_gat_model.predict(torch.tensor([device_idx]), torch.tensor([cloud_idx + num_users]))).item()\n","            print(f\"{device_name}가 {cloud_name}를 선택할 확률: {prob*100:.2f}%\")\n","            device_probs.append((cloud_name, prob))\n","\n","        # 가장 높은 확률의 클라우드 서버 선택\n","        best_cloud, best_prob = max(device_probs, key=lambda x: x[1])\n","        device_choices[device_name] = best_cloud\n","        print(f\"{device_name}의 최종 선택: {best_cloud} (확률: {best_prob*100:.2f}%)\")\n","        print(\"-\" * 50)\n","\n","# 최종 선택 결과 출력\n","print(\"\\n최종 디바이스-클라우드 서버 매칭 결과:\")\n","for device, cloud in device_choices.items():\n","    print(f\"{device} -> {cloud}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":349},"id":"j7c-oHAzSKA6","executionInfo":{"status":"error","timestamp":1720703438045,"user_tz":-540,"elapsed":1107,"user":{"displayName":"박준용","userId":"07115448813094959321"}},"outputId":"35bcc14d-9e4a-4711-8008-5a6752e63955"},"execution_count":null,"outputs":[{"output_type":"error","ename":"AttributeError","evalue":"'NGCF_GAT' object has no attribute 'predict'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-98-dc9ff74964da>\u001b[0m in \u001b[0;36m<cell line: 4>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      6\u001b[0m         \u001b[0mdevice_probs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mcloud_name\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcloud_idx\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mcloud_mapping\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m             \u001b[0mprob\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msigmoid\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mngcf_gat_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtensor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mdevice_idx\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtensor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcloud_idx\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mnum_users\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitem\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m             \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"{device_name}가 {cloud_name}를 선택할 확률: {prob*100:.2f}%\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m             \u001b[0mdevice_probs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcloud_name\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mprob\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m   1707\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mname\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmodules\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1708\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mmodules\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1709\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mAttributeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"'{type(self).__name__}' object has no attribute '{name}'\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1710\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1711\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__setattr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mUnion\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mTensor\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Module'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: 'NGCF_GAT' object has no attribute 'predict'"]}]},{"cell_type":"code","source":[],"metadata":{"id":"zH7wLrjE1jhy"},"execution_count":null,"outputs":[]}]}